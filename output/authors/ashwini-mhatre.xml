<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible Collaborative (Posts by Ashwini Mhatre)</title><link>https://ansible.com/</link><description></description><atom:link href="https://ansible.com/authors/ashwini-mhatre.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2024 &lt;a href="mailto:website@ansible.community"&gt;Ansible Collaborative, et al&lt;/a&gt; </copyright><lastBuildDate>Tue, 19 Mar 2024 16:48:34 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Getting Started with Ansible.utils Collection for Playbook Creators</title><link>https://ansible.com/blog/getting-started-with-ansible.utils-collection-for-playbook-creators-part-1/</link><dc:creator>Ashwini Mhatre</dc:creator><description>&lt;h2&gt;Part 1: The Ansible.utils Collection for Playbook Creators&lt;/h2&gt;
&lt;p&gt;The Ansible &lt;code&gt;ansible.utils&lt;/code&gt; collection includes a variety of plugins that
aid in the management, manipulation and visibility of data for the
Ansible playbook developer. The most common use case for this collection
is when you want to work with the complex data structures present in an
Ansible playbook, inventory, or returned from modules. See each plugin
&lt;a href="https://docs.ansible.com/ansible/latest/collections/ansible/utils/index.html"&gt;documentation&lt;/a&gt;
page for detailed examples for how these utilities can be used in tasks.
In this two-part blog we will overview this collection in part one and
see an example use case of using the utils collection in detail in part
two.&lt;/p&gt;
&lt;h2&gt;Plugins inside ansible.utils&lt;/h2&gt;
&lt;p&gt;Plugins are code which will augment ansible core functionality. This
code executes on control node.it and gives options and extensions for
the core features of Red Hat Ansible Automation Platform. This
&lt;code&gt;ansible.utils&lt;/code&gt; plugin collection includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filter plugins&lt;/li&gt;
&lt;li&gt;Lookup plugins&lt;/li&gt;
&lt;li&gt;Test plugins&lt;/li&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Filter plugins&lt;/h3&gt;
&lt;p&gt;Filter plugins manipulate data. With the right filter you can extract a
particular value, transform data types and formats, perform mathematical
calculations, split and concatenate strings, insert dates and times, and
do much more. Ansible Automation Platform uses the &lt;a href="https://jinja.palletsprojects.com/en/3.0.x/templates/#builtin-filters"&gt;standard filters&lt;/a&gt;
shipped with Jinja2 and adds some specialized filter plugins. You can
&lt;a href="https://docs.ansible.com/ansible/latest/dev_guide/developing_plugins.html#developing-filter-plugins"&gt;create custom Ansible filters as plugins&lt;/a&gt;.
Please refer to the
&lt;a href="https://docs.ansible.com/ansible/latest/plugins/filter.html"&gt;docs&lt;/a&gt; for
more information.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ansible.utils&lt;/code&gt; filter plugins include the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.from_xml_filter.rst"&gt;ansible.utils.from_xml&lt;/a&gt; - Convert a given XML string to native python dictionary.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.get_path_filter.rst"&gt;ansible.utils.get_path&lt;/a&gt; - Retrieve the value in a variable using a path&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.index_of_filter.rst"&gt;ansible.utils.index_of&lt;/a&gt; - Find the indices of items in a list matching some criteria&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.param_list_compare_filter.rst"&gt;ansible.utils.param_list_compare&lt;/a&gt; - Generate the final param list combining/comparing base and provided parameters.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.to_paths_filter.rst"&gt;ansible.utils.to_paths&lt;/a&gt; - Flatten a complex object into a dictionary of paths and values&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.to_xml_filter.rst"&gt;ansible.utils.to_xml&lt;/a&gt; - Convert given JSON string to XML&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.usable_range_filter.rst"&gt;ansible.utils.usable_range&lt;/a&gt; - Expand the usable IP addresses&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.validate_filter.rst"&gt;ansible.utils.validate&lt;/a&gt; - Validate data with provided criteria&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lookup plugins&lt;/h3&gt;
&lt;p&gt;Lookup plugins are an Ansible-specific extension to the Jinja2
templating language. You can use lookup plugins to access data from
outside sources (files, databases, key/value stores, APIs, and other
services) within your playbooks. Like all
&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html#playbooks-templating"&gt;templating&lt;/a&gt;,
lookups execute and are evaluated on the Ansible Automation Platform
control machine. Ansible makes the data returned by a lookup plugin
available using the standard templating system. You can use lookup
plugins to load variables or templates with information from external
sources. You can also&lt;a href="https://docs.ansible.com/ansible/latest/dev_guide/developing_plugins.html#developing-lookup-plugins"&gt;create custom lookup plugins&lt;/a&gt;.
Please refer to the &lt;a href="https://docs.ansible.com/ansible/latest/plugins/lookup.html"&gt;docs&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ansible.utils&lt;/code&gt; lookup plugins include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.get_path_lookup.rst"&gt;ansible.utils.get_path&lt;/a&gt; - Retrieve the value in a variable using a path&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.index_of_lookup.rst"&gt;ansible.utils.index_of&lt;/a&gt; - Find the indices of items in a list matching some criteria&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.to_paths_lookup.rst"&gt;ansible.utils.to_paths&lt;/a&gt; - Flatten a complex object into a dictionary of paths and values&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.validate_lookup.rst"&gt;ansible.utils.validate&lt;/a&gt; - Validate data with provided criteria&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: In &lt;code&gt;ansible.utils&lt;/code&gt; some plugins were
implemented as both filter and lookup plugins to give the playbook
developer flexibility depending on their use case.&lt;/p&gt;
&lt;h3&gt;Test plugins&lt;/h3&gt;
&lt;p&gt;Test plugins evaluate template expressions and return a value of True or
False. With test plugins you can create
&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_conditionals.html#playbooks-conditionals"&gt;conditionals&lt;/a&gt;
to implement the logic of your tasks, blocks, plays, playbooks, and
roles. Ansible Automation Platform uses the standard tests shipped as
part of Jinja, and adds some specialized test plugins. Please refer to
the &lt;a href="https://docs.ansible.com/ansible/latest/plugins/test.html"&gt;docs&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ansible.utils&lt;/code&gt; test plugins include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.in_any_network_test.rst"&gt;ansible.utils.in_any_network&lt;/a&gt; - Test if an IP or network falls in any network&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.in_network_test.rst"&gt;ansible.utils.in_network&lt;/a&gt; - Test if IP address falls in the network&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.in_one_network_test.rst"&gt;ansible.utils.in_one_network&lt;/a&gt; - Test if IP address belongs in any one of the networks in the list&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ip_test.rst"&gt;ansible.utils.ip&lt;/a&gt; - Test if something in an IP address or network&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ip_address_test.rst"&gt;ansible.utils.ip_address&lt;/a&gt; - Test if something in an IP address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ipv4_test.rst"&gt;ansible.utils.ipv4&lt;/a&gt; - Test if something is an IPv4 address or network&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ipv4_address_test.rst"&gt;ansible.utils.ipv4_address&lt;/a&gt; - Test if something is an IPv4 address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ipv4_hostmask_test.rst"&gt;ansible.utils.ipv4_hostmask&lt;/a&gt; - Test if an address is a valid hostmask&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ipv4_netmask_test.rst"&gt;ansible.utils.ipv4_netmask&lt;/a&gt; - Test if an address is a valid netmask&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ipv6_test.rst"&gt;ansible.utils.ipv6&lt;/a&gt; - Test if something is an IPv6 address or network&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ipv6_address_test.rst"&gt;ansible.utils.ipv6_address&lt;/a&gt; - Test if something is an IPv6 address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ipv6_ipv4_mapped_test.rst"&gt;ansible.utils.ipv6_ipv4_mapped&lt;/a&gt; - Test if something appears to be a mapped IPv6 to IPv4 mapped address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ipv6_sixtofour_test.rst"&gt;ansible.utils.ipv6_sixtofour&lt;/a&gt; - Test if something appears to be a 6to4 address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.ipv6_teredo_test.rst"&gt;ansible.utils.ipv6_teredo&lt;/a&gt; - Test if something appears to be an IPv6 teredo address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.loopback_test.rst"&gt;ansible.utils.loopback&lt;/a&gt; - Test if an IP address is a loopback&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.mac_test.rst"&gt;ansible.utils.mac&lt;/a&gt; - Test if something appears to be a valid MAC address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.multicast_test.rst"&gt;ansible.utils.multicast&lt;/a&gt; - Test for a multicast IP address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.private_test.rst"&gt;ansible.utils.private&lt;/a&gt; - Test if an IP address is private&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.public_test.rst"&gt;ansible.utils.public&lt;/a&gt; - Test if an IP address is public&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.reserved_test.rst"&gt;ansible.utils.reserved&lt;/a&gt; - Test for a reserved IP address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.resolvable_test.rst"&gt;ansible.utils.resolvable&lt;/a&gt; - Test if an IP or name can be resolved via /etc/hosts or DNS&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.subnet_of_test.rst"&gt;ansible.utils.subnet_of&lt;/a&gt; - Test if a network is a subnet of another network&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.supernet_of_test.rst"&gt;ansible.utils.supernet_of&lt;/a&gt; - Test if a network is a supernet of another network&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.unspecified_test.rst"&gt;ansible.utils.unspecified&lt;/a&gt; - Test for an unspecified IP address&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.validate_test.rst"&gt;ansible.utils.validate&lt;/a&gt; - Validate data with provided criteria&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Modules&lt;/h3&gt;
&lt;p&gt;Modules are the main building blocks of Ansible playbooks. Although we
do not generally speak of "module plugins", a module is a type of
plugin. For a developer-focused description of the differences between
modules and other plugins, see
&lt;a href="https://docs.ansible.com/ansible/latest/dev_guide/developing_locally.html#modules-vs-plugins"&gt;Modules and plugins: what is the difference?&lt;/a&gt;.
Please refer to the &lt;a href="https://docs.ansible.com/ansible/latest/plugins/module.html"&gt;docs&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ansible.utils&lt;/code&gt; modules include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.cli_parse_module.rst"&gt;ansible.utils.cli_parse&lt;/a&gt; - Parse cli output or text using a variety of parsers&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.fact_diff_module.rst"&gt;ansible.utils.fact_diff&lt;/a&gt; - Find the difference between currently set facts&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.update_fact_module.rst"&gt;ansible.utils.update_fact&lt;/a&gt; - Update currently set facts&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible-collections/ansible.utils/blob/main/docs/ansible.utils.validate_module.rst"&gt;ansible.utils.validate&lt;/a&gt; - Validate data with provided criteria&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Accessing and using the ansible.utils Collection&lt;/h3&gt;
&lt;p&gt;To download the utils Collection, refer to Automation hub (fully
supported, requires a Red Hat Ansible Automation Platform subscription)
or Ansible Galaxy (upstream):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://console.redhat.com/ansible/automation-hub/repo/published/ansible/utils"&gt;Automation hub Collection&lt;/a&gt;: &lt;code&gt;ansible.utils&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://galaxy.ansible.com/ansible/utils"&gt;Ansible Galaxy Collection&lt;/a&gt;: &lt;code&gt;ansible.utils&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ââAnsible.utils is also available in the Supported Execution environment
along with its required python libraries. Please refer to
&lt;a href="https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.html"&gt;docs for more details about Execution Environments.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Different use cases of Utils&lt;/h3&gt;
&lt;p&gt;As we know, &lt;code&gt;ansible.utils&lt;/code&gt; has a variety of plugins and it has various
use cases. The following are the most common use cases of &lt;code&gt;ansible.utils&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validating business logic before pushing configurations using validate and test plugins&lt;/li&gt;
&lt;li&gt;Auditing architectural deposition and layouts using test plugins&lt;/li&gt;
&lt;li&gt;Managing complex data structure in ansible playbook using &lt;code&gt;get_path&lt;/code&gt;, &lt;code&gt;to_path&lt;/code&gt; plugins&lt;/li&gt;
&lt;li&gt;Conducting minor checks related to network address using test plugins&lt;/li&gt;
&lt;li&gt;Operational state assessment using cli_parse, validate plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Future scope&lt;/h3&gt;
&lt;p&gt;Here are some additional &lt;code&gt;ansible.utils&lt;/code&gt; capabilities that are on the
horizon:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ipaddr filter plugin supports:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Ipaddr filter is designed to provide an interface to the &lt;a href="https://pypi.org/project/netaddr/"&gt;netaddr&lt;/a&gt; Python package from within Ansible.&lt;/li&gt;
&lt;li&gt;It can operate on strings or lists of items, test various data to check if they are valid IP addresses, and manipulate the input data to extract requested information.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipaddr()&lt;/code&gt; works with both IPv4 and IPv6 addresses in various forms.Â &lt;/li&gt;
&lt;li&gt;There are also additional functions available to manipulate IP subnets and MAC addresses.&lt;/li&gt;
&lt;li&gt;We are currently working on supporting the &lt;code&gt;ipaddr&lt;/code&gt; filter as part of &lt;code&gt;ansible.utils&lt;/code&gt; collection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Support of more number of validate engines in ansible.utils.validation plugin:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Currently the validate plugin is supporting only &lt;code&gt;ansible.utils.jsonschema&lt;/code&gt; validation engines, but there is plan to add more validation engines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Support different filter plugins to manipulate input data:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recursive plugins: &lt;code&gt;remove_keys&lt;/code&gt;, &lt;code&gt;replace_keys&lt;/code&gt;, &lt;code&gt;keep_keys&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Contributing to this collection&lt;/h3&gt;
&lt;p&gt;This collection is intended for plugins that are not platform or
discipline specific. Simple plugin examples should be generic in nature.
More complex examples can include real world platform modules to
demonstrate the utility of the plugin in a playbook.&lt;/p&gt;
&lt;p&gt;We welcome community contributions to this collection. If you find
problems, please open an issue or create a PR against the
&lt;a href="https://github.com/ansible-collections/ansible.utils"&gt;ansible.utils collection repository&lt;/a&gt;.
See &lt;a href="https://docs.ansible.com/ansible/devel/community/contributing_maintained_collections.html#contributing-maintained-collections"&gt;Contributing to Ansible-maintained collections&lt;/a&gt;
for complete details.
See the &lt;a href="https://docs.ansible.com/ansible/latest/community/index.html"&gt;Ansible Community Guide&lt;/a&gt;
for details on contributing to Ansible.&lt;/p&gt;
&lt;h3&gt;Takeaways and next steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible.utils&lt;/code&gt; plugins makes playbook writing experience simple and smooth&lt;/li&gt;
&lt;li&gt;Implementation of &lt;code&gt;ansible.utils&lt;/code&gt; plugins is very fast as they executed locally&lt;/li&gt;
&lt;li&gt;Easy to understand, code, use, and integrate with other modules&lt;/li&gt;
&lt;li&gt;As its plugins ecosystem, it is so easy to add new plugins in &lt;code&gt;ansible.utils&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description><guid>https://ansible.com/blog/getting-started-with-ansible.utils-collection-for-playbook-creators-part-1/</guid><pubDate>Mon, 24 Jan 2022 00:00:00 GMT</pubDate></item><item><title>Getting Started with Ansible.utils Collection for Playbook Creators</title><link>https://ansible.com/blog/getting-started-with-ansible.utils-collection-for-playbook-creators-part-2/</link><dc:creator>Ashwini Mhatre</dc:creator><description>&lt;h2&gt;Part 2: Use case of operational state assessment using ansible.utils collection&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;ansible.utils&lt;/code&gt;, there are a variety of plugins which we can use for
operational state assessment of network devices. I overviewed the
&lt;code&gt;ansible.utils&lt;/code&gt; collection in part one of this two part blog series. If
you have not reviewed part one,
I recommend you do so, since I will build on this information in this
part two blog. We will see how the &lt;code&gt;ansible.utils&lt;/code&gt; collection can be
useful in operational state assessment as an example use case.&lt;/p&gt;
&lt;p&gt;In general, state assessment workflow has following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Retrieve (Source of Truth)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collect the current operational state from the remote host.Â &lt;/li&gt;
&lt;li&gt;Convert it into normalized structured data. Structured data can
    be in json, yaml format or any other format.&lt;/li&gt;
&lt;li&gt;Store is an inventory variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Validate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define the desired state criteria in a standard based format,
    for example, as defined in a json schema format.&lt;/li&gt;
&lt;li&gt;Retrieve operational state at runtime.&lt;/li&gt;
&lt;li&gt;Validate the current state data against the pre-defined criteria
    to identify if there is any deviation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remediate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement required configuration changes to correct drift.Â &lt;/li&gt;
&lt;li&gt;Report on the change as an audit trail.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How can ansible.utils collection help in this workflow?&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ansible.utils&lt;/code&gt; collection makes it easier to retrieve and parse the
data so it can then be further assessed from a structured format.&lt;/p&gt;
&lt;h4&gt;Retrieving operational state in structured format using Ansible.utils.cli_parse&lt;/h4&gt;
&lt;p&gt;This module is available as &lt;code&gt;ansible.utils&lt;/code&gt; collection. It has a variety
of parsers which help to parse CLI output or text output. It can work
with multiple remote hosts like network, Linux, or windows.it. It
supports multiple parsing engines and it is extensible which means you
can create your own parsing engine. It is a single task to run a
command, parse and set facts.&lt;/p&gt;
&lt;p&gt;Before the utils collection was available, we would need to write three
different tasks to run commands, parse the output from command and set
facts. But thanks to &lt;code&gt;cli_parse&lt;/code&gt; we only have one task which will return
structured data from the "show command"
output.&lt;/p&gt;
&lt;p&gt;Let's see an example of &lt;code&gt;ansible.utils.cli_parse&lt;/code&gt; task:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;  tasks:

  &lt;span class="k"&gt;-&lt;/span&gt; name:  Run a command and parse results
    ansible.utils.cli_parse:
        command: show interfaces
        parser:
            name: ansible.utils.xxxx
            set_fact: interfaces
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this task we need to provide a command which will execute on the
device. Parser, which is a subplugin of &lt;code&gt;cli_parse&lt;/code&gt;, &lt;code&gt;plugin.set_fact&lt;/code&gt; sets
the converted structure in the interfaces key. We can then refer to the
interfaces key in our playbook.Â &lt;/p&gt;
&lt;p&gt;The above task will perform following operation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the command on the deviceÂ &lt;/li&gt;
&lt;li&gt;Parse using the 'xxxx' engineÂ &lt;/li&gt;
&lt;li&gt;Use a default template folderÂ &lt;/li&gt;
&lt;li&gt;Set parsed data as fact&lt;/li&gt;
&lt;li&gt;Return command output as stdout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently &lt;code&gt;ansible.utils.cli_parse&lt;/code&gt; plugin has following parsers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible.utils.textfsm&lt;/code&gt;: Python module for parsing semi-formatted
    text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible.utils.ttp&lt;/code&gt;: Template based parsing, low regex use,
    jinja-like DSL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible.netcommon.native&lt;/code&gt;: Internal jinja, regex, yaml without
    additional 3rd party libraries required&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible.netcommon.ntc_templates&lt;/code&gt;: Predefined textfsm templates
    packaged as python libraryÂ &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible.netcommon.pyats&lt;/code&gt;: Cisco Test Automation &amp;amp; Validation
    Solution (11 OSs/2500 parsers)Â &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible.utils.from_xml&lt;/code&gt;: convert XML to json using xmltodictÂ &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the generic parsers are part of the &lt;code&gt;ansible.utils&lt;/code&gt; collection and
all network-related parsers are part of the &lt;code&gt;ansible.netcommon&lt;/code&gt;
collection.&lt;/p&gt;
&lt;h4&gt;Validating structured data and report errors using ansible.utils.validate&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;Ansible.utils.validate&lt;/code&gt; module is a new module available as part of
the &lt;code&gt;ansible.utils&lt;/code&gt; collection which works with all platforms. It has
extensible engine support and currently works with the jsonschema
validation engine which uses the jsonschema python library underneath.
It is a single task, which reads structured data and validates it
against the data model provided in the task. This task will report
success or error in case the data is valid or invalid as per the
schema.Â &lt;/p&gt;
&lt;p&gt;Let's see an example of &lt;code&gt;ansible.utils.validate&lt;/code&gt; task:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="x"&gt;tasks:&lt;/span&gt;

&lt;span class="x"&gt;- name:  Validate structured data&lt;/span&gt;
&lt;span class="x"&gt;   ansible.utils.validate:&lt;/span&gt;
&lt;span class="x"&gt;       data: "&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;input_data&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;"&lt;/span&gt;
&lt;span class="x"&gt;       criteria:&lt;/span&gt;
&lt;span class="x"&gt;       - "&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'./criteria.json'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;from_json&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;"&lt;/span&gt;
&lt;span class="x"&gt;       engine: ansible.utils.xxxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this task we need to provide data which is supposed to be structured
data. Criteria is a list of criteria. Since currently we are using
jsonschema, we have criteria in json format. Engine is a sub-plugin of
the top level validate plugin. Here it is &lt;code&gt;ansible.utils.jsonschema&lt;/code&gt;.
Again, you can write your own engine as it is extensible.Â &lt;/p&gt;
&lt;p&gt;The above task will perform following operation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reads the input JSON data and the criteria for data (schema mode)&lt;/li&gt;
&lt;li&gt;Validate using the 'xxxx' engine&lt;/li&gt;
&lt;li&gt;Returns list of errors if data does not conform to the schema criteria&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently &lt;code&gt;ansible.utils.validate&lt;/code&gt; plugin supports following validation
engine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible.utils.jsonschema&lt;/code&gt;: Python module to validate json data against a schema.Â &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let's use the above plugins from &lt;code&gt;ansible.utils&lt;/code&gt; to see how we can
use them in actual scenarios. In this example we will see how to use
&lt;code&gt;ansible.utils&lt;/code&gt; to fetch BGP operational state data, validate it against
predefined json schema and also remediate configuration drift when
detected.Â &lt;/p&gt;
&lt;p&gt;For this scenario consider we have three CSRv routers which are running
cisco ios xe. All of them are BGP neighbors to each other and advertise
three networks each.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils blog 2 image one" src="https://ansible.com/images/posts/archive/utils-blog-one.png"&gt;&lt;/p&gt;
&lt;p&gt;Lets check running configuration and operation state data related to BGP.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils blog 2 image two" src="https://ansible.com/images/posts/archive/utils-blog-two.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Let's check the CSRv1 node. Lets execute command &lt;code&gt;show running-config | section bgp&lt;/code&gt;.
As you can see it has two neighbors configured, where
both of them have the same Remote AS, so they are IBGP neighbors. The
neighbors are activated and soft reconfiguration inbound is enabled on
them. This node also advertises three networks.&lt;/p&gt;
&lt;p&gt;Now let's execute the command &lt;code&gt;show bgp summary&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils blog 2 image three" src="https://ansible.com/images/posts/archive/utils-blog-three.png"&gt;&lt;/p&gt;
&lt;p&gt;The above screenshot tells us the neighbor relationships with the other
two nodes established and the current node receiving 3 prefixes from the
other two nodes.&lt;/p&gt;
&lt;p&gt;Now let's validate it using routing table entries.
Lets execute command &lt;code&gt;show ip route bgp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils blog 2 image four" src="https://ansible.com/images/posts/archive/utils-blog-four.png"&gt;&lt;/p&gt;
&lt;p&gt;The above screenshot shows route table entries from node 1. As you can
see, this node is aware of six routes, with the next hop being the
respective BGP neighbors advertising them.&lt;/p&gt;
&lt;p&gt;Similarly we have configured CSRv2 and CSRv3.&lt;/p&gt;
&lt;p&gt;Now let's check the playbooks which we are using in this example with
detailed steps.&lt;/p&gt;
&lt;p&gt;Checkout this &lt;a href="https://github.com/ashwini-mhatre/bgp_demo/"&gt;code&lt;/a&gt;
if you want to learn more details.&lt;/p&gt;
&lt;p&gt;Playbooks are divided into two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gather facts and store them in a yaml file as the Source of Truth (SOT)&lt;/li&gt;
&lt;li&gt;Validate structured data against SOT and rectify drift if it is detected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gather facts and store it in a yaml file for SOT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's check the content of &lt;a href="https://github.com/ashwini-mhatre/bgp_demo/blob/main/playbooks/facts.yaml"&gt;facts.yaml&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils blog 2 image five" src="https://ansible.com/images/posts/archive/utils-blog-five.png"&gt;&lt;/p&gt;
&lt;p&gt;In the first task we are gathering bgp_global and bgp_address_family
facts from target devices. In the second task we are storing them in a
flat file under the hostvars directory. These files will act as SOT
(source of truth) for BGP config on target devices.&lt;/p&gt;
&lt;p&gt;Lets run the above playbook with &lt;code&gt;ansible-navigator run playbooks/facts.yaml&lt;/code&gt; using this command.
See &lt;a href="https://ansible-navigator.readthedocs.io/en/latest/"&gt;ansible-navigator&lt;/a&gt; docs for more details.&lt;/p&gt;
&lt;p&gt;How does this data look after execution of the playbook? Let's check
&lt;a href="https://github.com/ashwini-mhatre/bgp_demo/blob/fest21/playbooks/host_vars/csrv-1.yaml"&gt;playbooks/host_vars/csrv-1.yaml.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils blog 2 image six" src="https://ansible.com/images/posts/archive/utils-blog-six.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Validate structured data against SOT and rectify drift if it is detected&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this step we will inspect BGP operational state data for all the
nodes in our topology and then determine if they are running as expected
or if there is any configuration drift.&lt;/p&gt;
&lt;p&gt;Now let's see the
&lt;a href="https://github.com/ashwini-mhatre/bgp_demo/blob/fest21/playbooks/verify.yaml"&gt;playbooks/verify.yaml&lt;/a&gt;
playbook which will validate and rectify drift if it is present.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils blog 2 image seven" src="https://ansible.com/images/posts/archive/utils-blog-seven.png"&gt;&lt;/p&gt;
&lt;p&gt;In the first task we have used the &lt;code&gt;ansible.utils.cli_parse&lt;/code&gt; plugin to
execute the &lt;code&gt;show ip route bgp&lt;/code&gt; command on the target device and then
pass the output of this command to &lt;code&gt;pyats parser&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The pyats parser then converts the output to structured data which is
stored in the result variable.&lt;/p&gt;
&lt;p&gt;In the next task we pass the value in the result variable along with a
predefined schema to the &lt;code&gt;ansible.utils.validate&lt;/code&gt; plugin. The plugin
then compares the data against the schema or the criteria using the
jsonschema engine. Each node has a schema file that defines the prefix
ranges which they received from the other two neighbors .&lt;/p&gt;
&lt;p&gt;As we saw from the topology and the CLI that these nodes are supposed to
receive six routes (three in total) from each of the neighbor nodes. Now
these prefixes are represented as patterns in the schema along with
other properties like source_protocol, route_preferences, metric and
active state.&lt;/p&gt;
&lt;p&gt;The schema also sets the additional properties to false and defines
minimum and maximum number of properties as six. This ensures that
validating against the schema will always tell us whether the devices
are receiving exactly the set of routes which they are supposed to
receive or not.&lt;/p&gt;
&lt;p&gt;Following is the example of a
&lt;a href="https://github.com/ashwini-mhatre/bgp_demo/blob/fest21/playbooks/bgp_schema/csrv-1.json"&gt;schema file&lt;/a&gt;
for node CSRv1.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils-blog-eight" src="https://ansible.com/images/posts/archive/utils-blog-eight.png"&gt;&lt;/p&gt;
&lt;p&gt;Let's check further tasks of
&lt;a href="https://github.com/ashwini-mhatre/bgp_demo/blob/fest21/playbooks/verify.yaml"&gt;verify.yaml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the schema validation in the second task fails, the playbook enters
the rescue section. This is where we used the BGP resource modules to
enforce the SOT which we have saved previously in yaml files on the
target devices. The end result will be remediating any configuration
drift which causes failure in operation state validation.&lt;/p&gt;
&lt;p&gt;If we execute the verify.yaml playbook with the &lt;code&gt;ansible-navigator run playbooks/verify.yaml&lt;/code&gt;
command, as we have not made changes to any
of the target devices, we see that they are working as expected and
schema validation passes. See
&lt;a href="https://ansible-navigator.readthedocs.io/en/latest/"&gt;ansible-navigator&lt;/a&gt;
docs for more details.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils-blog-nine" src="https://ansible.com/images/posts/archive/utils-blog-nine.png"&gt;&lt;/p&gt;
&lt;p&gt;Let's manually introduce erroneous changes on all devices. Then we
will run the same playbook again and see how it behaves. Let's remove
the routes to make the erroneous changes they are
advertising.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils-blog-ten" src="https://ansible.com/images/posts/archive/utils-blog-ten.png"&gt;&lt;/p&gt;
&lt;p&gt;Now we have made changes in all the routers. Let's run the playbook
again with &lt;code&gt;ansible-navigator run playbooks/verify.yaml.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This time the schema validation fails. Remediation tasks are executed
and they add facts that are missing prefixes on all three nodes. Let's
take a detailed look into this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="utils-blog-eleven" src="https://ansible.com/images/posts/archive/utils-blog-eleven.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The first task, as usual, fetches the output of the show command and
converts it to structured data.&lt;/p&gt;
&lt;p&gt;The second task fails because the schema validation fails with multiple
errors. The data doesn't match the constraints defined in the schema.
This causes the remediation tasks to execute one by one.Â &lt;/p&gt;
&lt;p&gt;After the remediation tasks are complete, the configure BGP task showed
no changes because we did not make any changes to the BGP global
attribute.&lt;/p&gt;
&lt;p&gt;The second one is where the BGP address family detects the drifts and
reconfigures the missing prefixes.Â &lt;/p&gt;
&lt;p&gt;As we can see in the commands sent for all the target devices, the
playbook adds facts to the routes that are deleted.&lt;/p&gt;
&lt;p&gt;If we run this playbook once again it will be idempotent and report no
changes, thereby indicating everything working as expected.Â &lt;/p&gt;
&lt;p&gt;In a production environment, this playbook can be triggered based on
external events or also can be scheduled as a periodic job in Red Hat
Ansible Automation Platform's Automation controller to ensure compliance
with the expected operational state.&lt;/p&gt;
&lt;h3&gt;Takeaways &amp;amp; Next Steps&lt;/h3&gt;
&lt;p&gt;As shown above, the &lt;code&gt;ansible.utils&lt;/code&gt; collection:Â &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Makes operational state assessment easier, complementing Ansible
    Automation Platform's configuration management capabilities.&lt;/li&gt;
&lt;li&gt;Acts as a single entry point for gathering the operational state of
    the entire inventory.&lt;/li&gt;
&lt;li&gt;Provides a standardized way to define and validate the operational
    criteria as a structured data model.&lt;/li&gt;
&lt;li&gt;Adds the steps for operational state assessment as a workflow
    template in Automation controller which can trigger other events,
    like running a playbook for automated remediation or reporting to an
    external tool, etc.Â &lt;/li&gt;
&lt;/ul&gt;</description><guid>https://ansible.com/blog/getting-started-with-ansible.utils-collection-for-playbook-creators-part-2/</guid><pubDate>Mon, 24 Jan 2022 00:00:00 GMT</pubDate></item></channel></rss>