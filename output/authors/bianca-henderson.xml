<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible Collaborative (Posts by Bianca Henderson)</title><link>https://ansible.com/</link><description></description><atom:link href="https://ansible.com/authors/bianca-henderson.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:website@ansible.community"&gt;Ansible Collaborative, et al&lt;/a&gt; </copyright><lastBuildDate>Thu, 21 Mar 2024 14:38:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Introduction to Ansible Builder</title><link>https://ansible.com/blog/introduction-to-ansible-builder/</link><dc:creator>Bianca Henderson</dc:creator><description>&lt;h2&gt;Introduction to Ansible Builder&lt;/h2&gt;
&lt;p&gt;Hello and welcome to another introductory Ansible blog post, where
we'll be covering a new command-line interface (CLI) tool, Ansible
Builder. Please note that this article will cover some
intermediate-level topics such as containers (Ansible Builder uses
&lt;a href="https://developers.redhat.com/articles/podman-next-generation-linux-container-tools"&gt;Podman&lt;/a&gt;
by default), virtual environments, and Ansible Content Collections.
If you have some familiarity with those topics, then read on to find out
what Ansible Builder is, why it was developed, and how to use it. &lt;/p&gt;
&lt;p&gt;This project is currently in development upstream on
&lt;a href="https://github.com/ansible/ansible-builder"&gt;GitHub&lt;/a&gt; and is not yet part
of the Red Hat Ansible Automation Platform product.  As with all Red Hat
software, our &lt;a href="https://www.redhat.com/en/our-code-is-open"&gt;code is open&lt;/a&gt;
and we have an open source development model for our enterprise
software.  The goal of this blog post is to show the current status of
this initiative, and start getting the community and customers
comfortable with our methodologies, thought process, and concept of
Execution Environments.  Feedback on this upstream project can be
provided on GitHub via comments and issues, or provided via the various
methods listed on our website.&lt;/p&gt;
&lt;h2&gt;What is Ansible Builder?&lt;/h2&gt;
&lt;p&gt;In a nutshell, Ansible Builder is a tool that aids in the creation of
Ansible Execution Environments. To fully understand this, let's step
back and discuss what exactly execution environments are.  &lt;/p&gt;
&lt;h3&gt;A Primer on Execution Environments&lt;/h3&gt;
&lt;p&gt;Before the concept of Execution Environments came about, the Ansible
Automation Platform execution system was limited to executing jobs under
&lt;a href="https://github.com/containers/bubblewrap"&gt;bubblewrap&lt;/a&gt; in order to
isolate processes. There were several problems related to this,
including the fact that in the cases of Red Hat OpenShift and
Kubernetes-based deployments, any container running jobs had to run in
privileged mode. In addition to this issue, consuming Ansible Content
Collections was very labor-intensive and users faced a lot of challenges
managing custom Python virtual environments and Ansible module
dependencies. The concept of Execution Environments is the solution to
these problems; simply put, they are container images that can be
utilized as Ansible control nodes. These container images enable the
simplification and automation of outdated processes.&lt;/p&gt;
&lt;p&gt;As an example of how useful Execution Environments can be, let's say a
developer writes content for Ansible locally by using container
technology so that they can create portable automation runtimes; these
container images will allow that developer to share pre-packaged
Execution Environment, which can be tested and promoted to production.
This eliminates a lot of manual steps (e.g. creating a Dockerfile from
scratch) and accelerates operations by streamlining development and
deployment.  &lt;/p&gt;
&lt;h3&gt;Ansible Builder is a Tool for Building Execution Environments&lt;/h3&gt;
&lt;p&gt;To enable developers, contributors, and users to take advantage of this
new concept, Ansible Builder was developed to automate the process of
building Execution Environments.  It does this by using the dependency
information defined in various Ansible Content Collections, as well as
by the user. Ansible Builder will produce a directory that acts as the
build context for the container image build, which will contain the
&lt;code&gt;Containerfile&lt;/code&gt;, along with any other files that need to be added to the image.&lt;/p&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;h4&gt;Installing&lt;/h4&gt;
&lt;p&gt;You can install Ansible Builder from the &lt;a href="https://pypi.org/project/ansible-builder/"&gt;Python Package Index
(PyPI)&lt;/a&gt; or from the main
ansible-builder development branch of the codebase hosted on
&lt;a href="https://github.com/ansible/ansible-builder"&gt;GitHub&lt;/a&gt;. In your terminal,
simply run:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ansible-builder
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Podman is used by default to build images. To use Docker, use
&lt;code&gt;ansible-builder build --container-runtime docker&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Writing a Definition&lt;/h4&gt;
&lt;p&gt;In the world of Ansible Builder, the "definition" is a YAML file that
outlines the Execution Environment's Collection-level dependencies, base
image source, and overrides for specific items within the Execution
Environment. The &lt;code&gt;ansible-builder build&lt;/code&gt; command, which we
will discuss in further detail later, takes the definition file as an
input and then outputs the build context necessary for creating an
Execution Environment image, which it then uses to actually build that
image. That same build context can consistently rebuild the Execution
Environment image elsewhere, which enables users to create distributable
working environments for any Collections. &lt;/p&gt;
&lt;p&gt;Below is an example of the content that would be in a definition file:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;galaxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;requirements.yml&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;requirements.txt&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bindep.txt&lt;/span&gt;

&lt;span class="nt"&gt;additional_build_steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;RUN pip3 install --upgrade pip setuptools&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;append&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;RUN ls -la /etc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The build command will default to using a definition file
named &lt;code&gt;execution-environment.yml&lt;/code&gt;.
If you want to use a different file, you will need to specify the file
name with the &lt;code&gt;-f&lt;/code&gt; (or &lt;code&gt;--file&lt;/code&gt;) flag. This file &lt;em&gt;must&lt;/em&gt; be a &lt;code&gt;.yml&lt;/code&gt;
formatted file.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;dependencies&lt;/code&gt; section of
the definition file above, the entries that would be listed there may be
a relative path from the directory of the Execution Environment
definition's folder, or an absolute path. Below is an example of what
might be contained in a &lt;code&gt;requirements.yml&lt;/code&gt; file,
which points to a valid requirements file for the
&lt;code&gt;ansible-galaxy collection install -r&lt;/code&gt;... command:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The following collection example is sourced from Automation
Hub on &lt;a href="http://cloud.redhat.com/"&gt;cloud.redhat.com&lt;/a&gt; and requires a valid
&lt;a href="http://red.ht/try_ansible"&gt;Ansible Automation Platform subscription&lt;/a&gt;
and an upcoming feature to ansible-builder to access.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information on using Automation Hub, refer to the &lt;a href="https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#downloading-a-collection-from-automation-hub"&gt;user
    guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For instructions on how to use an ansible.cfg file with Ansible
    Builder, see the &lt;a href="https://ansible-builder.readthedocs.io/en/latest/definition.html#ansible-config-file-path"&gt;documentation
    here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="nt"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;redhat.openshift&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;python&lt;/code&gt; entry points to a Python requirements file for &lt;code&gt;pip install -r&lt;/code&gt;.
For example, the &lt;code&gt;requirements.txt&lt;/code&gt; file might contain the following:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;awxkit&amp;gt;=13.0.0
boto&amp;gt;=2.49.0
botocore&amp;gt;=1.12.249
boto3&amp;gt;=1.9.249
openshift&amp;gt;=0.6.2
requests-oauthlib
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://docs.openstack.org/infra/bindep/readme.html"&gt;bindep&lt;/a&gt;
requirements file specifies cross-platform requirements, if there are
any.  These get processed by bindep and then passed to dnf (other
platforms are not yet supported as of the publication of this blog
post). An example of the content of a
&lt;code&gt;bindep.txt&lt;/code&gt; file is below:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;subversion [platform:rpm]
subversion [platform:dpkg]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additional commands may be specified in the &lt;code&gt;additional_build_steps&lt;/code&gt; section, to be executed before the main build steps (&lt;code&gt;prepend&lt;/code&gt;) or after (&lt;code&gt;append&lt;/code&gt;).
The syntax needs to be either a multi-line string (as shown in the &lt;code&gt;prepend&lt;/code&gt; section of the example definition file) or a list (as shown via the example's &lt;code&gt;append&lt;/code&gt; section).&lt;/p&gt;
&lt;h4&gt;Customizable Options&lt;/h4&gt;
&lt;p&gt;Before we run the &lt;code&gt;build&lt;/code&gt; command, let's discuss the customizable options you can use alongside
it.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;'-f', '--file'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This flag points to the specific definition file of the Execution Environment; it will default to &lt;code&gt;execution-environment.yml&lt;/code&gt; if a different file name is not specified.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;'-b', '--base-image'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The parent image for the Execution Environment; when not mentioned, it defaults to &lt;code&gt;quay.io/ansible/ansible-runner:devel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;'-c', '--context'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The directory to use for the build context, if it should be generated in a specific place. The default location is &lt;code&gt;$PWD/context.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;'--container-runtime'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Specifies which container runtime to use; the choices are &lt;code&gt;podman&lt;/code&gt; (default option) or &lt;code&gt;docker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;'--tag'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The name for the container image being built; when nothing is specified with this flag, the image will be named &lt;code&gt;ansible-execution-env&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As with most CLIs, adding &lt;code&gt;--help&lt;/code&gt; at the end of
any Ansible Builder command will provide output in the form of help text
that will display and explain the options available under any particular
command. Below is an example of a command for looking up help text,
along with its corresponding output:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;ansible-builder&lt;span class="w"&gt; &lt;/span&gt;--help
usage:&lt;span class="w"&gt; &lt;/span&gt;ansible-builder&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;-h&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--version&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;build,introspect&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;...

Tooling&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;images&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;running&lt;span class="w"&gt; &lt;/span&gt;Ansible&lt;span class="w"&gt; &lt;/span&gt;content.&lt;span class="w"&gt; &lt;/span&gt;Get
started&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;looking&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;one&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;subcommands.

positional&lt;span class="w"&gt; &lt;/span&gt;arguments:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;build,introspect&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;invoke.
&lt;span class="w"&gt;    &lt;/span&gt;build&lt;span class="w"&gt;             &lt;/span&gt;Builds&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;image.
&lt;span class="w"&gt;    &lt;/span&gt;introspect&lt;span class="w"&gt;        &lt;/span&gt;Introspects&lt;span class="w"&gt; &lt;/span&gt;collections&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;folder.

optional&lt;span class="w"&gt; &lt;/span&gt;arguments:
&lt;span class="w"&gt;  &lt;/span&gt;-h,&lt;span class="w"&gt; &lt;/span&gt;--help&lt;span class="w"&gt;          &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;message&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--version&lt;span class="w"&gt;           &lt;/span&gt;Print&lt;span class="w"&gt; &lt;/span&gt;ansible-builder&lt;span class="w"&gt; &lt;/span&gt;version&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;exit.
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Start the Build&lt;/h4&gt;
&lt;p&gt;Let's see what happens when we run the build command!
The build definition will be gathered from the default &lt;code&gt;execution-environment.yml&lt;/code&gt; file as shown below:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;galaxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;requirements.yml&lt;/span&gt;

&lt;span class="nt"&gt;additional_build_steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;RUN pip3 install --upgrade pip setuptools&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;append&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;RUN ls -la /etc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will be building an image named &lt;code&gt;my_first_ee_image&lt;/code&gt; using Docker by running the command below:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;ansible-builder&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;--tag&lt;span class="w"&gt; &lt;/span&gt;my_first_ee_image&lt;span class="w"&gt; &lt;/span&gt;--container-runtime&lt;span class="w"&gt; &lt;/span&gt;docker
Using&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.7.7&lt;span class="o"&gt;)&lt;/span&gt;
File&lt;span class="w"&gt; &lt;/span&gt;context/introspect.py&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;already&lt;span class="w"&gt; &lt;/span&gt;up-to-date.
Writing&lt;span class="w"&gt; &lt;/span&gt;partial&lt;span class="w"&gt; &lt;/span&gt;Containerfile&lt;span class="w"&gt; &lt;/span&gt;without&lt;span class="w"&gt; &lt;/span&gt;collection&lt;span class="w"&gt; &lt;/span&gt;requirements
Running&lt;span class="w"&gt; &lt;/span&gt;command:
&lt;span class="w"&gt;  &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;context/Dockerfile&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;my_first_ee_image&lt;span class="w"&gt; &lt;/span&gt;context
Sending&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;context&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;Docker&lt;span class="w"&gt; &lt;/span&gt;daemon&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;.34kB
Step&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/3&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;FROM&lt;span class="w"&gt; &lt;/span&gt;quay.io/ansible/ansible-runner:devel
devel:&lt;span class="w"&gt; &lt;/span&gt;Pulling&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;ansible/ansible-runner
85a0beca2b15:&lt;span class="w"&gt; &lt;/span&gt;Pulling&lt;span class="w"&gt; &lt;/span&gt;fs&lt;span class="w"&gt; &lt;/span&gt;layer
...
e21f0ff5ad71:&lt;span class="w"&gt; &lt;/span&gt;Pull&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;complete&lt;/span&gt;
Digest:&lt;span class="w"&gt; &lt;/span&gt;sha256:e2b84...
Status:&lt;span class="w"&gt; &lt;/span&gt;Downloaded&lt;span class="w"&gt; &lt;/span&gt;newer&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;quay.io/ansible/ansible-runner:devel
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;6b886a75333f
Step&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/3&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;RUN&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Running&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;e9cea402bd67
this&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;
Removing&lt;span class="w"&gt; &lt;/span&gt;intermediate&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;e9cea402bd67
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;5d253a1fbd54
Step&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;RUN&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;/etc/os-release
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Running&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;788173de3929
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Fedora
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"32 (Container Image)"&lt;/span&gt;
...
&lt;span class="nv"&gt;VARIANT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Container Image"&lt;/span&gt;
&lt;span class="nv"&gt;VARIANT_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;container
Removing&lt;span class="w"&gt; &lt;/span&gt;intermediate&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;788173de3929
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;df802929c259
Successfully&lt;span class="w"&gt; &lt;/span&gt;built&lt;span class="w"&gt; &lt;/span&gt;df802929c259
Successfully&lt;span class="w"&gt; &lt;/span&gt;tagged&lt;span class="w"&gt; &lt;/span&gt;my_first_ee_image:latest
Running&lt;span class="w"&gt; &lt;/span&gt;command:
&lt;span class="w"&gt;  &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--rm&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;/Users/bhenderson/Documents/GitHub/ansible-builder/context:/context:Z&lt;span class="w"&gt; &lt;/span&gt;my_first_ee_image&lt;span class="w"&gt; &lt;/span&gt;/bin/bash&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;/context/introspect.py
python:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;
system:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;

Rewriting&lt;span class="w"&gt; &lt;/span&gt;Containerfile&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;capture&lt;span class="w"&gt; &lt;/span&gt;collection&lt;span class="w"&gt; &lt;/span&gt;requirements
Running&lt;span class="w"&gt; &lt;/span&gt;command:
&lt;span class="w"&gt;  &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;context/Dockerfile&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;my_first_ee_image&lt;span class="w"&gt; &lt;/span&gt;context
Sending&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;context&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;Docker&lt;span class="w"&gt; &lt;/span&gt;daemon&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;.34kB
Step&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/4&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;FROM&lt;span class="w"&gt; &lt;/span&gt;quay.io/ansible/ansible-runner:devel
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;6b886a75333f
Step&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/4&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;RUN&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Using&lt;span class="w"&gt; &lt;/span&gt;cache
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;5d253a1fbd54
Step&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/4&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;RUN&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;/etc/os-release
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Using&lt;span class="w"&gt; &lt;/span&gt;cache
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;df802929c259
Removing&lt;span class="w"&gt; &lt;/span&gt;intermediate&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;6bd2a824fe4f
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;ba254aa08b88
Step&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/4&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;RUN&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-la&lt;span class="w"&gt; &lt;/span&gt;/etc
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Running&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;aa3d855d3ae7
total&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1072&lt;/span&gt;
drwxr-xr-x&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;:25&lt;span class="w"&gt; &lt;/span&gt;.
...
drwxr-xr-x&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Jul&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;06&lt;/span&gt;:48&lt;span class="w"&gt; &lt;/span&gt;yum.repos.d
Removing&lt;span class="w"&gt; &lt;/span&gt;intermediate&lt;span class="w"&gt; &lt;/span&gt;container&lt;span class="w"&gt; &lt;/span&gt;aa3d855d3ae7
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;0b386b132825
Successfully&lt;span class="w"&gt; &lt;/span&gt;built&lt;span class="w"&gt; &lt;/span&gt;0b386b132825
Successfully&lt;span class="w"&gt; &lt;/span&gt;tagged&lt;span class="w"&gt; &lt;/span&gt;my_first_ee_image:latest
Complete!&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;context&lt;span class="w"&gt; &lt;/span&gt;can&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;found&lt;span class="w"&gt; &lt;/span&gt;at:&lt;span class="w"&gt; &lt;/span&gt;context
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see from the output above, the definition file points to the
specific Collection(s) listed, then builds a container image with all of
the dependencies specified in the metadata.  Output such as:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;Step&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/3&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;RUN&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Running&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;e9cea402bd67
this&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;Step&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/4&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;RUN&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-la&lt;span class="w"&gt; &lt;/span&gt;/etc
&lt;span class="w"&gt; &lt;/span&gt;---&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Running&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;aa3d855d3ae7
total&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1072&lt;/span&gt;
drwxr-xr-x&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;:25&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;shows that the &lt;code&gt;prepend&lt;/code&gt; and &lt;code&gt;append&lt;/code&gt; steps are also being run correctly.
The following output shows that we indeed did not list any Python or system requirements:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;python:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;
system:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Validating with Ansible Runner&lt;/h3&gt;
&lt;p&gt;Due to this new tool still being in development, we are taking a
shortcut with our current available set of tools to help us validate
against this. That being said, as of now, &lt;code&gt;ansible-runner&lt;/code&gt; is a
command-line utility that has the ability to interact with playbooks. 
Also, since it is a key part of Execution Environments, our validation
for now will be that the content runs as expected.  This will change in
the future; we'll definitely come up with something bigger and better!
So stay tuned. &lt;/p&gt;
&lt;p&gt;Now without further ado, let's dive into this...&lt;/p&gt;
&lt;p&gt;If you do not have Ansible Runner already installed, you can refer to
its
&lt;a href="https://ansible-runner.readthedocs.io/en/latest/install.html"&gt;documentation&lt;/a&gt;
for guidance. Below is an example playbook (we'll call it
&lt;code&gt;test.yml&lt;/code&gt;) that can be
run via Ansible Runner to ensure that the Execution Environment is
working:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;local&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ensure the myapp Namespace exists.&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;redhat.openshift.k8s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;api_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Namespace&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;myapp&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To confirm that the &lt;code&gt;my_first_ee_image&lt;/code&gt;
Execution Environment image did indeed get built correctly and will work
with the &lt;code&gt;redhat.openshift&lt;/code&gt; Collection, run the command below to execute our
&lt;code&gt;test.yml&lt;/code&gt; playbook:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;ansible-runner&lt;span class="w"&gt; &lt;/span&gt;playbook&lt;span class="w"&gt; &lt;/span&gt;--container-image&lt;span class="o"&gt;=&lt;/span&gt;my_first_ee_image&lt;span class="w"&gt; &lt;/span&gt;test.yml
PLAY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*************************************************************

TASK&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Gathering&lt;span class="w"&gt; &lt;/span&gt;Facts&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*******************************************************
ok:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt;

TASK&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Ensure&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;myapp&lt;span class="w"&gt; &lt;/span&gt;Namespace&lt;span class="w"&gt; &lt;/span&gt;exists.&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;************************************
changed:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt;

PLAY&lt;span class="w"&gt; &lt;/span&gt;RECAP&lt;span class="w"&gt; &lt;/span&gt;*******************************************************************
Localhost:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;skipped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rescued&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;ignored&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running the command &lt;code&gt;ansible-runner&lt;/code&gt; playbook will indicate to Ansible Runner that we want it to execute a playbook
that's similar to running the command &lt;code&gt;ansible-playbook&lt;/code&gt; itself.
However, Ansible Runner has additional advantages over a traditional
&lt;code&gt;ansible-playbook&lt;/code&gt; command, one of which is to let us take advantage of the Execution
Environment image and its dependencies, which ultimately allows the
playbook to run. For this specific example, note that we also inherited
the &lt;code&gt;kubeconfig&lt;/code&gt; set per the &lt;code&gt;redhat.openshift.k8s&lt;/code&gt; module; this &lt;code&gt;kubeconfig&lt;/code&gt;
is automatically detected and mounted into the Execution Environment
container runtime (just as many other cloud provider modules and SSH
credentials are) without any additional input needed from the user.&lt;/p&gt;
&lt;h3&gt;Distributing&lt;/h3&gt;
&lt;p&gt;Execution Environment build contexts (as well as the containers built
from them) can be easily shared via public or private registries.  This
new workflow process allows users to automate tasks that were once more
manual (e.g. container images can be scanned and rebuilt automatically
when vulnerabilities are discovered inside).  The build context,
generated when we ran the &lt;code&gt;ansible-builder&lt;/code&gt; command,
can be committed to source control and utilized later without the need
for Ansible Builder, either locally or on another system.&lt;/p&gt;
&lt;h4&gt;Push to GitHub&lt;/h4&gt;
&lt;p&gt;After an Execution Environment image has been built using Ansible
Builder, all of the build context files can be pushed to GitHub (or any
other version control system) for distribution.  See below for an
example of a repository that hosts everything necessary for re-building
a specific image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible Builder Blog one" src="https://ansible.com/images/posts/archive/ansible-builder-blog-one.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.redhat.com/en/technologies/cloud-computing/quay"&gt;Red Hat Quay&lt;/a&gt; is a
container image registry that provides storage and enables the building,
distribution, and deployment of containers. Set up an account in quay.io
and select "Create New Repository". A series of choices will be
displayed, starting with what's shown below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible Builder blog two" src="https://ansible.com/images/posts/archive/ansible-builder-blog-two.png"&gt;&lt;/p&gt;
&lt;p&gt;From here, you can select your specific GitHub repository (or wherever
you are hosting your image files), then navigate through other settings
such as configuring the build triggers, as well as the specific
Containerfile/Dockerfile and context, amongst other things:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible builder blog three" src="https://ansible.com/images/posts/archive/ansible-builder-blog-three.png"&gt;&lt;/p&gt;
&lt;p&gt;There are other ways you can also share your Execution Environment
images; the above is just a single example of a streamlined and
easy-to-integrate method.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We hope you enjoyed learning about Execution Environments and how to
build them using the new Ansible Builder CLI tool!  In a future version
of Red Hat Ansible Automation Platform, Execution Environments will be
able to be used to run jobs in Ansible Automation Platform, so keep an
eye out for details regarding the next release. For further reading,
please refer to the &lt;a href="https://ansible-builder.readthedocs.io/en/latest/"&gt;Ansible Builder documentation&lt;/a&gt;,
&lt;a href="https://ansible-runner.readthedocs.io/en/latest/execution_environments.html"&gt;Ansible Runner documentation&lt;/a&gt;,
and be sure to take a look at the &lt;a href="https://github.com/ansible/ansible-builder"&gt;Ansible Builder repo&lt;/a&gt; on GitHub.&lt;/p&gt;</description><guid>https://ansible.com/blog/introduction-to-ansible-builder/</guid><pubDate>Thu, 10 Dec 2020 00:00:00 GMT</pubDate></item><item><title>Introducing the AWX and Ansible Tower Collections</title><link>https://ansible.com/blog/introducing-the-awx-collection/</link><dc:creator>Bianca Henderson</dc:creator><description>&lt;h2&gt;Introducing the AWX and Ansible Tower Collections&lt;/h2&gt;
&lt;p&gt;Ansible Content Collections are a new way of distributing content,
including modules, for Ansible. &lt;/p&gt;
&lt;p&gt;The AWX and Ansible Tower Collections allow Ansible Playbooks to
interact with AWX and Ansible Tower. Much like interacting with AWX or
Red Hat Ansible Tower via the web-based UI or the API, the modules
provided by the AWX Collection are another way to create, update or
delete objects as well as perform tasks such as run jobs, configure
Ansible Tower and more. This article will discuss new updates regarding
this collection, as well as an example playbook and details on how to
run it successfully.&lt;/p&gt;
&lt;p&gt;The AWX Collection
&lt;a href="https://galaxy.ansible.com/awx/awx"&gt;awx.awx&lt;/a&gt; is the
upstream community distribution available on Ansible Galaxy.  The
downstream supported Ansible Collection
&lt;a href="https://cloud.redhat.com/ansible/automation-hub/ansible/tower"&gt;ansible.tower&lt;/a&gt;
is available on Automation Hub alongside the release of Ansible Tower 3.7.&lt;/p&gt;
&lt;p&gt;This collection is a replacement for the
&lt;a href="https://docs.ansible.com/ansible/latest/modules/list_of_web_infrastructure_modules.html#ansible-tower"&gt;Ansible Tower web modules&lt;/a&gt;
which were previously housed and maintained directly in the
&lt;a href="https://github.com/ansible/ansible/tree/stable-2.9/lib/ansible/modules/web_infrastructure/ansible_tower"&gt;Ansible repo&lt;/a&gt;.
The modules were initially &lt;a href="https://github.com/ansible/awx/pull/4701"&gt;added to the AWX source&lt;/a&gt; in October of 2019,
when collections work began; the &lt;code&gt;tower_*&lt;/code&gt; modules in Ansible Core were
&lt;a href="https://github.com/ansible/ansible/pull/67233"&gt;marked for official migration&lt;/a&gt;
shortly after. &lt;/p&gt;
&lt;h3&gt;Improvements in the AWX Collection&lt;/h3&gt;
&lt;p&gt;The modules delivered by Ansible Core and the initial versions of the
AWX Collection had a dependency on libraries provided by the
&lt;a href="https://github.com/ansible/tower-cli"&gt;tower-cli&lt;/a&gt; project.  Due to the
deprecation of tower-cli, there is work currently being done to remove
that dependency. This has led to a major update to the AWX Collection.&lt;/p&gt;
&lt;p&gt;During the removal of tower-cli, we have tried to keep the modules
backwards-compatible with their corresponding version that shipped in
Ansible Core. This way, if you have already leveraged the &lt;code&gt;tower_*&lt;/code&gt;
modules from Ansible Core, there should be very little work required
when switching to the AWX Collection. For more information, see the
&lt;a href="https://docs.google.com/document/d/1HCPVLmLmNVX59MiAWlOAmnJUMKYfQed6pd64sr3tOLg/edit#heading=h.rfgzmyttyslb"&gt;Deprecation Updates&lt;/a&gt;
section below.&lt;/p&gt;
&lt;p&gt;In addition, we have standardized the modules' operational logic, thus
making the collections modules more uniform. Previously, each module was
written individually (sometimes by different authors). This caused
subtle differences of behavior for the individual modules. The modules
distributed in the AWX Collection follow a standard pattern, which
provides consistency even if written by different authors.&lt;/p&gt;
&lt;p&gt;The syncing of the collection to the Red Hat Ansible Tower versions also
allows the modules' parameters to be kept in sync with the options
available within the web UI and API. As part of the recent changes, we
have added some new
&lt;a href="https://github.com/ansible/awx/tree/devel/awx_collection/tools"&gt;tooling&lt;/a&gt;
as well as updated many of the modules to now include parameters for
functionality which have been added to Ansible Tower since the modules
were initially released.&lt;/p&gt;
&lt;p&gt;The collection now also provides better support for idempotency as well
as check_mode. In previous versions using check_mode, older modules
would simply ensure that they could connect to the Ansible Tower server
but not indicate if they would have actually made a change to an Ansible
Tower object. The AWX Collections modules will now more accurately
indicate if they would have changed a Tower object via check_mode. &lt;/p&gt;
&lt;h3&gt;Using the AWX Collection&lt;/h3&gt;
&lt;p&gt;It's very easy to get started with AWX Collection; all you need to do is
install the collection from &lt;a href="https://galaxy.ansible.com/awx/awx"&gt;Ansible
Galaxy&lt;/a&gt; in order to interact with
Ansible Tower. This can be done with the command:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;ansible-galaxy&lt;span class="w"&gt; &lt;/span&gt;collection&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;awx.awx
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the collection is installed, we can begin writing playbooks to
manage your instance of Ansible Tower.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In order to communicate with your Red Hat Ansible Tower
environment, you need to have an instance of it running, with a
dedicated Ansible Tower host address.  &lt;/p&gt;
&lt;h4&gt;Setting Up Authentication&lt;/h4&gt;
&lt;p&gt;The first thing we need to do in order to interact with Red Hat Ansible
Tower is provide authentication. This can be done in several ways, all
of which are backwards-compatible with the old version of the modules.
The following authentication options are available for use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specify the connection information as module parameters&lt;/li&gt;
&lt;li&gt;Provide environment variables with the connection information&lt;/li&gt;
&lt;li&gt;Reference an old tower_cli.cfg file that contains the connection
    information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is an example of a tower_cli.cfg file:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$HOST_ADDRESS&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;verify_ssl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;False&lt;/span&gt;
&lt;span class="nt"&gt;tower_username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$TOWER_USERNAME&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;tower_password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$TOWER_PASSWORD&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;oauth_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$OAUTH_TOKEN&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(if using oauth instead of a password)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Creating a Playbook&lt;/h4&gt;
&lt;p&gt;Once you have the AWX Collection installed and your authentication
method decided upon, we can begin &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html"&gt;writing a
playbook&lt;/a&gt;
to interact with Ansible Tower. In order to activate the collection, the
following code snippet is required at the play level of your playbook:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;awx.awx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Even if you are running on a version of Ansible that still ships with
the &lt;code&gt;tower_*&lt;/code&gt; modules, this will cause Ansible to load the modules from
the AWXCollection instead of the versions shipped in Ansible Core. The
rest of your playbook would look identical to a playbook that did not
use the collection. &lt;/p&gt;
&lt;p&gt;In the example playbook below, the authentication information is not
specified in the tasks and would be loaded either from the environment
variables or a &lt;code&gt;tower_cli.cfg&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Playbook for Using a Variety of Tower Modules&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;gather_facts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;awx.awx&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create a new organization&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;tower_organization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Org"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"test&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;org"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create an Inventory&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;tower_inventory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Inventory"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"test&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;inv"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Org"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create a Host&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;tower_host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Host"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Inventory"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bar&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create a Project&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;tower_project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Project"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Org"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;scm_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;scm_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/ansible/test-playbooks.git&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create a Team&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;tower_team&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Test&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Team"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"test&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;team"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Org"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;validate_certs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create a Job Template&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;tower_job_template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Template&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Launch"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Project"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"New&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Inventory"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;playbook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;debug.yml&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;ask_extra_vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Launch the Job Template (w/ extra_vars)!&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;tower_job_launch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;job_template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Template&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Launch"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;extra_vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;My First Variable&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;My Second Variable&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;My Third Variable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Another way to tell Ansible to use a module from a collection
is to fully qualify the modules' name with the collection namespace, as
in this example below:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Launch the Job Template (w/ extra_vars)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;awx.awx.tower_job_launch&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;job_template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Template&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Launch"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;extra_vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;My First Variable&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;My Second Variable&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;My Third Variable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Executing the Playbook&lt;/h4&gt;
&lt;p&gt;Assuming that the playbook above was saved in your current directory as
a file named configure_tower.yml, the following command would run this
playbook:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;ansible-playbook&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;localhost&lt;span class="w"&gt; &lt;/span&gt;configure_tower.yml
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you have issues with Python on your machine, changing the
ansible-playbook command to the following might help:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;ansible-playbook&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;localhost&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ansible_python_interpreter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;configure_tower.yml
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With a properly-installed collection, configured authentication setup
and a correctly-formatted playbook, you should see output similar to
this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ansible-blog-screenshot-awx-collection" src="https://ansible.com/images/posts/archive/ansible-blog-screenshot-awx-collection.png"&gt;&lt;/p&gt;
&lt;p&gt;Upon completion of the playbook, If you navigate to the web UI of your
Red Hat Ansible Tower server, you should be able to see that the
following objects were created:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An organization called "New Org"&lt;/li&gt;
&lt;li&gt;An inventory called "New Inventory" and host called "New Host" within that inventory&lt;/li&gt;
&lt;li&gt;A project called "New Project"&lt;/li&gt;
&lt;li&gt;A team called "New Team"&lt;/li&gt;
&lt;li&gt;A job template called "Job Template to Launch"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, you can see on the Jobs page that the playbook invoked the
job template with the specified extra_vars.  See below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="bianca collections tower ui" src="https://ansible.com/images/posts/archive/tower-ui-bianca-collections.png"&gt;&lt;/p&gt;
&lt;h3&gt;Deprecation Updates&lt;/h3&gt;
&lt;p&gt;During the removal of tower-cli, we attempted to keep the modules as
similar as possible to ease the transition from the old Core modules to
the new collection. Inevitably, some minor changes had to be made;
details of these changes can be found in the "Release and Upgrade"
section of the AWX Collections
&lt;a href="https://github.com/ansible/awx/blob/devel/awx_collection/README.md#release-and-upgrade-notes"&gt;README.md&lt;/a&gt;
file. Some changes to mention include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extra_vars parameters no longer support load of variables from a
    file by specifying a &lt;code&gt;@&amp;lt;file name&amp;gt;&lt;/code&gt; notation. Instead, they now take
    dictionaries. If you were previously loading a file, please use the
    lookup plugin to load the file instead.&lt;/li&gt;
&lt;li&gt;Some modules no longer return values the way they used to. All
    returns have been unified across the modules and primarily return
    the ID of the object modified.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It is quite simple and straightforward to get up and running with the
AWX Collection.  Amongst other things, collections enable users to store
their most frequently-used tasks inside of different playbooks, which
can be easily shared as needed.  In a follow-up blog post, we will
discuss contribution and development, as well as how to test any new or
updated modules you may want to add to the collection.&lt;/p&gt;</description><guid>https://ansible.com/blog/introducing-the-awx-collection/</guid><pubDate>Mon, 04 May 2020 00:00:00 GMT</pubDate></item><item><title>Using the win_dsc Module in Ansible</title><link>https://ansible.com/blog/using-the-win_dsc-module-in-ansible/</link><dc:creator>Bianca Henderson</dc:creator><description>&lt;h2&gt;Using the win_dsc Module in Ansible&lt;/h2&gt;
&lt;p&gt;Hello, and welcome to another Getting Started with Ansible + Windows post! In
this article we'll be exploring what Desired State Configuration is, why
it's useful, and how to utilize it with Ansible to manage your Windows
nodes.&lt;/p&gt;
&lt;h3&gt;What is DSC?&lt;/h3&gt;
&lt;p&gt;So what exactly is Desired State Configuration? It's basically a system
configuration management platform that uses the declarative model; in
other words, you tell DSC the "what", and it will figure out the "how".
Much like Ansible, DSC uses push-mode execution to send configurations
to the target hosts. This is very important to consider when delivering
resources to multiple targets.&lt;/p&gt;
&lt;p&gt;This time-saving tool is built into PowerShell, defining Windows node
setup through code. It uses the Local Configuration Manager (which is
the DSC execution engine that runs on each node).&lt;/p&gt;
&lt;p&gt;Microsoft fosters a community effort to build and maintain DSC resources
for a variety of technologies. The results of these efforts are curated
and published each month to the Powershell Gallery as the &lt;a href="https://github.com/PowerShell/DscResources"&gt;DSC Resource
Kit&lt;/a&gt;. If there isn't a
native Ansible module available for the technology you need to manage,
there may be a DSC resource.&lt;/p&gt;
&lt;h3&gt;How Do You Use DSC with Ansible?&lt;/h3&gt;
&lt;p&gt;DSC Resources are distributed as PowerShell modules, which means that it
works similarly to Ansible, just implemented in a different manner. The
&lt;code&gt;win_dsc&lt;/code&gt; module has been available since the release of Ansible 2.4,
and it can influence existing DSC resources whenever it interacts with a
Windows host.&lt;/p&gt;
&lt;p&gt;To use this module, you will need PowerShell 5.1 or later. Once you make
sure that you have the correct version of PowerShell installed on your
Windows nodes, using DSC is as easy as executing a task using the
&lt;code&gt;win_dsc&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;Let's look at it in action. For this example we'll ensure a DNS server
is installed, the &lt;code&gt;xDnsServer&lt;/code&gt; DSC resource module is present, and also
use a couple of the DSC resources under it to define a zone and an A
Record:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;-&lt;/span&gt; hosts: Erasmus
  tasks:
  &lt;span class="k"&gt;-&lt;/span&gt; win_feature:
      name:
      &lt;span class="k"&gt;-&lt;/span&gt; DNS
      &lt;span class="k"&gt;-&lt;/span&gt; RSAT-DNS-Server
      state: present
  &lt;span class="k"&gt;-&lt;/span&gt; win_psmodule:
      name: xDnsServer
      repository: PSGallery
  &lt;span class="k"&gt;-&lt;/span&gt; win_dsc:
      resource_name: xDnsServerPrimaryZone
      Name: my-arbre.com
  &lt;span class="k"&gt;-&lt;/span&gt; win_dsc:
      resource_name: xDnsRecord
      Name: test
      Zone: my-arbre.com
      Target: 192.168.17.75
      Type: ARecord
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's walk through what's happening in the above playbook: it starts by
installing the DNS Server on the target, then the &lt;code&gt;xDnsServer&lt;/code&gt; DSC
resource module is installed. With the DSC resources now installed the
&lt;code&gt;xDnsServerPrimaryZone&lt;/code&gt; resource is called to create the zone, then the
&lt;code&gt;xDnsRecord&lt;/code&gt; resource is invoked with arguments to fill in the zone
details for our &lt;code&gt;my-arbre.com&lt;/code&gt; site. The &lt;code&gt;xDnsServer&lt;/code&gt; resource is
downloaded from PowerShellGallery.com which has a reliable community for
DSC resources.&lt;/p&gt;
&lt;p&gt;Keep in mind that the &lt;code&gt;win_dsc&lt;/code&gt; module is designed for driving a single
DSC Resource provider to make it work like an Ansible module. It is not
intended to be used for defining the DSC equivalent of a playbook on the
host and running it.&lt;/p&gt;
&lt;p&gt;A couple more points to remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;resource_name&lt;/code&gt; must be set to the name of a DSC resource
    already installed on the target when defining the task.&lt;/li&gt;
&lt;li&gt;Matching the case to the documentation is best practices; this also
    makes it easier to tell the difference of DSC resource options from
    Ansible's &lt;code&gt;win_dsc&lt;/code&gt; options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Now you know the basics of how to use DSC for your Windows nodes by
invoking the win_dsc module in an Ansible Playbook. To read more about
Ansible + DSC, check out our official &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/windows_dsc.html"&gt;documentation page&lt;/a&gt;
on the topic.&lt;/p&gt;
&lt;p&gt;Special thanks to my teammate John Lieske for lots of technical assistance with this post.
And as always, happy automating!&lt;/p&gt;</description><guid>https://ansible.com/blog/using-the-win_dsc-module-in-ansible/</guid><pubDate>Tue, 31 Jul 2018 00:00:00 GMT</pubDate></item><item><title>Getting Started with Workflow Job Templates</title><link>https://ansible.com/blog/getting-started-workflow-job-templates/</link><dc:creator>Bianca Henderson</dc:creator><description>&lt;h2&gt;Getting Started with Workflow Job Templates&lt;/h2&gt;
&lt;p&gt;Welcome to another post in the Getting Started series! Today we're going to get
into the topic of Workflow Job Templates. If you don't know what regular
Job Templates are in Red Hat Ansible Tower, please read the previously
published article that describes them. It'll provide you with some technical
details that'll be a useful jumping-off point for the topic of workflows.&lt;/p&gt;
&lt;p&gt;Once you're familiar with the basics, read on! We'll be covering what
exactly Workflow Job Templates are, what makes them useful, how to
generate/edit one, and a few extra pointers as well as best practices to
make the most out of this great tool.&lt;/p&gt;
&lt;h3&gt;What is a Workflow Job Template?&lt;/h3&gt;
&lt;p&gt;The word "workflow" says it all. This particular feature in Ansible
Tower (available as of version 3.1) enables users to create sequences
consisting of any combination of job templates, project syncs, and
inventory syncs that are linked together in order to execute them as a
single unit. Because of this, workflows can help you organize playbooks
and job templates into separate groups.&lt;/p&gt;
&lt;h3&gt;Why are Workflows Useful?&lt;/h3&gt;
&lt;p&gt;By utilizing this feature, you can set up ordered structures for
different teams to use. For example, two different environments (i.e.,
networking and developers) can interface via workflows as long as they
have permissions to access it. Not everyone involved will need to know
what job run goes after what, since the structure is set up for them by
the user who created the workflow. This connects disparate job types and
unifies projects without each team needing to know everything about what
the other does.&lt;/p&gt;
&lt;p&gt;Another reason workflows are useful is because they allow the user to
take any number of playbooks and "daisy chain" them, with the ability to
make a decision tree depending on a job's success or failure. You can
make them as simple or as complex as they need to be!&lt;/p&gt;
&lt;h4&gt;How Do You Create One?&lt;/h4&gt;
&lt;p&gt;[Go into the Templates section on the top menu of Ansible Tower:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-13" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-13.jpg"&gt;&lt;/p&gt;
&lt;p&gt;From there, click on "Add", but make sure to select "Workflow Template":&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-15" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-15.jpg"&gt;&lt;/p&gt;
&lt;p&gt;You'll see this new screen, where you can name your workflow template
anything you like and save it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-10" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-10.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Once you've done that, go into "Edit Workflow":&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-1" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This screen will come up, where you can add different job templates and
make sure they run on failure, success, or with either outcome:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-11" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-11.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Note that you can decide if things run on success, on failure, or
always.&lt;/p&gt;
&lt;p&gt;[**&lt;img alt="Getting-Started-Tower-Workflows-9" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-9.jpg"&gt;&lt;/p&gt;
&lt;p&gt;As mentioned in the previous section, you can make your Ansible workflow
as simple...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-4" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;...or complex as you need to!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-12" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-12.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After everything is set and saved, you're ready to launch your template,
which you can do by clicking on the rocket icon next to the workflow
you'd like to run:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-7" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-7.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;What More Can You Do With Workflows?&lt;/h4&gt;
&lt;p&gt;You can &lt;a href="https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html#scheduling"&gt;schedule your workflows&lt;/a&gt;
to run when you need them to! Just click on the calendar icon next to
any workflow job template:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-5" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-5.jpg"&gt;&lt;/p&gt;
&lt;p&gt;... and fill out the information for when you want the specified
workflow to automatically run:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-8" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-8.jpg"&gt;
 
If you have a workflow template created that works very well for you and
you'd like to copy it, click on the button highlighted below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-2" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind that copying a workflow won't also copy over any of the
permissions, notifications, or schedules associated with the original.&lt;/p&gt;
&lt;p&gt;If you need to set extra variables for the playbooks involved in a
workflow template and/or allow for authorization of user input, then
&lt;a href="https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html#surveys"&gt;setting up surveys&lt;/a&gt;
is the way to go. In order to set one up, select a workflow template and
click on the "Add Survey" button:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-3" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A survey screen that you can fill out with specific questions and answer
types will show up:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-14" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-14.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html#work-with-notifications"&gt;Notifications&lt;/a&gt;
can give you more control and knowledge related to specific workflows.
To activate one, select the workflow that you want to set notifications
for, then click the Notifications button:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-16" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-16.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind that you'll have to already have some notifications set up
in the Notifications list. The screen that comes up will enable you to
select specific notifications; in the example below the
"Workflow-Specific Notification" has been set to activate on either a
successful or failed run:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Getting-Started-Tower-Workflows-6" src="https://ansible.com/images/posts/archive/Getting-Started-Tower-Workflows-6.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Note: Make sure you have "update on launch" on your inventory
selected when you make a new workflow job template if you're acting
against a dynamic
inventory!&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Now you know how to combine any number of playbooks into a customized
decision tree, with the ability to schedule those jobs, add
notifications, and much more. An added bonus is the fact that this isn't
an enterprise-only feature, so no matter your Ansible Tower license
type, you can log into your instance and have fun creating workflows!&lt;/p&gt;
&lt;p&gt;To read more about how to create and modify workflow job templates,
check out our &lt;a href="https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html"&gt;official documentation page&lt;/a&gt;
on the topic.&lt;/p&gt;
&lt;p&gt;I hope this article was helpful, and that it enables you to take
advantage of the powerful automation features that are possible with
Ansible Tower!&lt;/p&gt;</description><guid>https://ansible.com/blog/getting-started-workflow-job-templates/</guid><pubDate>Thu, 05 Jul 2018 00:00:00 GMT</pubDate></item><item><title>Connecting to a Windows Host</title><link>https://ansible.com/blog/connecting-to-a-windows-host/</link><dc:creator>Bianca Henderson</dc:creator><description>&lt;h2&gt;Connecting to a Windows Host&lt;/h2&gt;
&lt;p&gt;Welcome to the first installment of our Windows-specific Getting Started series!&lt;/p&gt;
&lt;p&gt;Would you like to automate some of your Windows hosts with Red Hat
Ansible Tower, but don't know how to set everything up? Are you worried
that Red Hat Ansible Engine won't be able to communicate with your
Windows servers without installing a bunch of extra software? Do you
want to easily automate everyone's best friend, Clippy?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible-Windows-Clippy" src="https://ansible.com/images/posts/archive/Ansible-Windows/Ansible-Windows-Clippy.png"&gt;&lt;/p&gt;
&lt;p&gt;We can't help with the last thing, but if you said yes to the other two
questions, you've come to the right place. In this post, we'll walk you
through all the steps you need to take in order to set up and connect to
your Windows hosts with Ansible Engine.&lt;/p&gt;
&lt;h3&gt;Why Automate Windows Hosts?&lt;/h3&gt;
&lt;p&gt;A few of the many things you can do for your Windows hosts with Ansible
Engine include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Starting, stopping and managing services&lt;/li&gt;
&lt;li&gt;Pushing and executing custom PowerShell scripts&lt;/li&gt;
&lt;li&gt;Managing packages with the Chocolatey package manager&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to connecting to and automating Windows hosts using local or
domain users, you'll also be able to use &lt;code&gt;runas&lt;/code&gt; to execute actions as
the Administrator (the Windows alternative to Linux's &lt;code&gt;sudo&lt;/code&gt; or &lt;code&gt;su&lt;/code&gt;),
so no privilege escalation ability is lost.&lt;/p&gt;
&lt;h3&gt;What's Required?&lt;/h3&gt;
&lt;p&gt;Before we start, let's go over the &lt;a href="http://docs.ansible.com/ansible/latest/user_guide/windows_setup.html#host-requirements."&gt;basic
requirements&lt;/a&gt;.
First, your control machine (where Ansible Engine will be executing your
chosen Windows modules from) needs to run Linux. Second, Windows support
has been evolving rapidly, so make sure to use the newest possible
version of Ansible Engine to get the latest features!&lt;/p&gt;
&lt;p&gt;For the target hosts, you should be running at least Windows 7 SP1 or
later or Windows Server 2008 SP1 or later. You don't want to be running
something from the 90's like Windows NT, because this might happen:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible-Windows-90s" src="https://ansible.com/images/posts/archive/Ansible-Windows-90s.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Lastly, since Ansible connects to Windows machines and runs PowerShell
scripts by using &lt;a href="https://msdn.microsoft.com/en-us/library/aa384291(v=vs.85).aspx"&gt;Windows Remote
Management&lt;/a&gt;
(WinRM) (as an alternative to SSH for Linux/Unix machines), a WinRM
listener should be created and activated. The good news is, connecting
to your Windows hosts can be done very easily and quickly using a
script, which we'll discuss in the section below.&lt;/p&gt;
&lt;h3&gt;Step 1: Setting up WinRM&lt;/h3&gt;
&lt;p&gt;What's WinRM? It's a feature of Windows Vista and higher that lets
administrators run management scripts remotely; it handles those
connections by implementing the WS-Management Protocol, based on &lt;a href="https://msdn.microsoft.com/en-us/library/ms995800.aspx"&gt;Simple
Object Access
Protocol&lt;/a&gt;
(commonly referred to as &lt;a href="https://en.wikipedia.org/wiki/SOAP"&gt;SOAP&lt;/a&gt;).
With WinRM, you can do cool stuff like access, edit and update data from
local and remote computers as a network administrator.&lt;/p&gt;
&lt;p&gt;The reason WinRM is perfect for using with Ansible Engine is because you
can obtain hardware data from WS-Management protocol implementations
running on non-Windows operating systems (in this specific case, Linux).
It's basically like a translator that allows different types of
operating systems to work together.&lt;/p&gt;
&lt;p&gt;So, how do we connect?&lt;/p&gt;
&lt;p&gt;With most versions of Windows, WinRM ships in the box but isn't turned
on by default. There's a &lt;a href="https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"&gt;Configure Remoting for
Ansible&lt;/a&gt;
script you can run on the remote Windows machine (in a PowerShell
console as an Admin) to turn on WinRM. To set up an https listener,
build a self-signed cert and execute PowerShell commands, just run the
script like in the example below (if you've got the &lt;code&gt;.ps1&lt;/code&gt; file stored
locally on your machine):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible-Windows-Powershell" src="https://ansible.com/images/posts/archive/Ansible-Windows-Powershell.png"&gt;&lt;/p&gt;
&lt;p&gt;Note: The
&lt;a href="http://docs.ansible.com/ansible/latest/modules/win_psexec_module.html"&gt;win_psexec&lt;/a&gt;
module will help you enable WinRM on multiple machines if you have lots
of Windows hosts to set up in your environment.&lt;/p&gt;
&lt;p&gt;For more information on WinRM and Ansible, check out the &lt;a href="http://docs.ansible.com/ansible/latest/user_guide/windows_winrm.html"&gt;Windows Remote
Management&lt;/a&gt;
documentation page.&lt;/p&gt;
&lt;h3&gt;Step 2: Install Pywinrm&lt;/h3&gt;
&lt;p&gt;Since pywinrm dependencies aren't shipped with Ansible Engine (and these
are necessary for using WinRM), make sure you install the
pywinrm-related library on the machine that Ansible is installed on. The
simplest method is to run &lt;code&gt;pip install pywinrm&lt;/code&gt; in your Terminal.&lt;/p&gt;
&lt;h3&gt;Step 3: Set Up Your Inventory File Correctly&lt;/h3&gt;
&lt;p&gt;In order to connect to your Windows hosts properly, you need to make
sure that you put in &lt;code&gt;ansible_connection=winrm&lt;/code&gt; in the &lt;a href="http://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#host-variables"&gt;host
vars&lt;/a&gt;
section of your inventory file so that Ansible Engine doesn't just keep
trying to connect to your Windows host via SSH.&lt;/p&gt;
&lt;p&gt;Also, the WinRM connection plugin defaults to communicating via https,
but it supports different modes like message-encrypted http. Since the
"Configure Remoting for Ansible" script we ran earlier set things up
with the self-signed cert, we need to tell Python, "Don't try to
validate this certificate because it's not going to be from a valid CA."
So in order to prevent an error, one more thing you need to put into the
&lt;code&gt;host vars&lt;/code&gt; section is: &lt;code&gt;ansible_winrm_server_cert_validation=ignore&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just so you can see it in one place, here is an example host file
(please note, some details for your particular environment will be
different):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;win&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;172.16.2.5&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;172.16.2.6&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;[win:vars]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible_user=vagrant&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible_password=password&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible_connection=winrm&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible_winrm_server_cert_validation=ignore&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 4: Test Connection&lt;/h3&gt;
&lt;p&gt;Let's check to see if everything is working. To do this, go to your
control node's terminal and type
&lt;code&gt;ansible [host_group_name_in_inventory_file] -i hosts -m win_ping&lt;/code&gt;. Your
output should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible-Windows-Screen-Grab" src="https://ansible.com/images/posts/archive/Ansible-Windows-Screen-Grab.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Note: The &lt;code&gt;win_&lt;/code&gt; prefix on all of the Windows modules indicates that
they are implemented in PowerShell and not Python.&lt;/p&gt;
&lt;h3&gt;Troubleshooting WinRM&lt;/h3&gt;
&lt;p&gt;Because WinRM can be configured in so many different ways, errors that
seem Ansible Engine-related can actually be due to problems with host
setup instead. Some examples of WinRM errors that you might see include
an HTTP 401 or HTTP 500 error, timeout issues or a connection refusal.
To get tips on how to solve these problems, visit the &lt;a href="http://docs.ansible.com/ansible/devel/user_guide/windows_setup.html#common-winrm-issues"&gt;Common WinRM
Issues&lt;/a&gt;
section of our Windows Setup documentation page.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;You should now be ready to automate your Windows hosts using Ansible,
without the need to install a ton of additional software! Keep in mind,
however, that even if you've followed the instructions above, some
Windows modules have additional specifications (e.g., a newer OS or more
recent PowerShell version). The best way to figure out if you're meeting
the right requirements is to check the
&lt;a href="https://docs.ansible.com/ansible/latest/collections/index_module.html#ansible-windows"&gt;module-specific&lt;/a&gt;
documentation pages.&lt;/p&gt;
&lt;p&gt;For more in-depth information on how to use Ansible Engine to automate
your Windows hosts, check out our &lt;a href="http://docs.ansible.com/ansible/latest/user_guide/windows_faq.html"&gt;Windows
FAQ&lt;/a&gt;
and &lt;a href="http://docs.ansible.com/ansible/latest/user_guide/windows.html"&gt;Windows
Support&lt;/a&gt;
documentation page and stay tuned for more Windows-related blog posts!&lt;/p&gt;</description><guid>https://ansible.com/blog/connecting-to-a-windows-host/</guid><pubDate>Tue, 24 Apr 2018 00:00:00 GMT</pubDate></item></channel></rss>