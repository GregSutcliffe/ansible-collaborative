<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible Collaborative (Posts by Jeff Geerling)</title><link>https://ansible.com/</link><description></description><atom:link href="https://ansible.com/authors/jeff-geerling.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2024 &lt;a href="mailto:website@ansible.community"&gt;Ansible Collaborative, et al&lt;/a&gt; </copyright><lastBuildDate>Thu, 21 Mar 2024 14:38:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How useful is Ansible in a Cloud-Native Kubernetes Environment?</title><link>https://ansible.com/blog/how-useful-is-ansible-in-a-cloud-native-kubernetes-environment/</link><dc:creator>Jeff Geerling</dc:creator><description>&lt;h2&gt;How useful is Ansible in a Cloud-Native Kubernetes Environment?&lt;/h2&gt;
&lt;p&gt;A question I've been hearing a lot lately is "why are you still using
Ansible in your Kubernetes projects?" Followed often by "what's the
point of writing your book &lt;a href="https://www.ansibleforkubernetes.com/"&gt;Ansible for
Kubernetes&lt;/a&gt; when Ansible isn't
really necessary once you start using Kubernetes?"&lt;/p&gt;
&lt;p&gt;I spent a little time thinking about these questions, and the motivation
behind them, and wanted to write a blog post addressing them, because it
seems a lot of people may be confused about what Kubernetes does, what
Ansible does, and why both are necessary technologies in a modern
business migrating to a cloud-native technology stack (or even a fully
cloud-native business).&lt;/p&gt;
&lt;p&gt;One important caveat to mention upfront, and I quote directly from my
book:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;While Ansible can do almost everything for you, it may not be the right
tool for every aspect of your infrastructure automation. Sometimes there
are other tools which may more cleanly integrate with your application
developers' workflows, or have better support from app vendors.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We should always guard against the &lt;a href="https://en.wikipedia.org/wiki/Law_of_the_instrument"&gt;golden hammer
fallacy&lt;/a&gt;. No single
infrastructure tool---not even the best Kubernetes-as-a-service
platform---can fill the needs of an entire business's IT operation. If
anything, we have seen an explosion of specialist tools as is evidenced
by the &lt;a href="https://landscape.cncf.io/"&gt;CNCF landscape&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ansible fits into multiple areas of cloud-native infrastructure
management, but I would like to specifically highlight three areas in
this post:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible_cloud-native-venn-diagram" src="https://ansible.com/images/posts/archive/Ansible_cloud-native-venn-diagram.png"&gt;&lt;/p&gt;
&lt;p&gt;Namely, how Ansible fits into the processes for Container Builds,
Cluster Management, and Application Lifecycles.&lt;/p&gt;
&lt;p&gt;I'd especially caution against teams diving into Kubernetes head first
without a broader automation strategy. Kubernetes can't manage your
entire application lifecycle, nor can it bootstrap itself; you should
not settle for automating the inside of a Kubernetes cluster while using
manual processes to build and manage your cluster; this becomes
especially dangerous if you manage more than one cluster, as is best
practice for most environments (at least having a staging and production
cluster, or a private internal cluster and a public facing cluster).&lt;/p&gt;
&lt;h3&gt;Container Build&lt;/h3&gt;
&lt;p&gt;In the past decade, server management and application deployment became
more and more automated. Usually, automation became more intuitive and
maintainable, especially after the introduction of configuration
management and orchestration tools like CFEngine, Puppet, Chef, and
Ansible.&lt;/p&gt;
&lt;p&gt;There's no great solution for all application deployments, though, even
with modern automation tools. Java has WAR files and the VM. Python has
virtual environments. PHP has scripts and multiple execution engines.
Ruby has ruby environments. Running operations teams who can efficiently
manage servers and deployments for five, ten, or more development stacks
(and sometimes multiple versions of each, like Java 7, Java 8, and Java
11) is a failing proposition.&lt;/p&gt;
&lt;p&gt;Luckily, containerization started to solve that issue. Instead of
developers handing off source code and expecting operations to be able
to handle the intricacies of multiple environments, developers hand off
containers, which can be run by a compatible container runtime on almost
any modern server environment.&lt;/p&gt;
&lt;p&gt;But in some ways, things have stagnated in the container build realm;
the Dockerfile, which was nothing more than a shell script with some
Docker-specific DSL and hacky inline commands to solve image layer size
issues, is still used in many places as the &lt;em&gt;de facto&lt;/em&gt; app build script.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Geerling Blog 3" src="https://ansible.com/images/posts/archive/geerling-blog-three.png"&gt;&lt;/p&gt;
&lt;p&gt;How many times have you encountered an indecipherable Dockerfile like
this?&lt;/p&gt;
&lt;p&gt;We can do better. Ansible can build and manage containers using
Dockerfiles, sure, but Ansible is also very good at building container
images directly---and nowadays, you don't even need to install Docker!
There are lighter-weight open source build tools like
&lt;a href="https://buildah.io/"&gt;Buildah&lt;/a&gt; that integrate with an Ansible container
build tool
&lt;a href="https://github.com/ansible-community/ansible-bender"&gt;ansible-bender&lt;/a&gt; to
build containers using more expressive and maintainable Ansible
Playbooks.&lt;/p&gt;
&lt;p&gt;There are other ways to build containers, too. But I lament the fact
that many developers and sysadmins have settled on the lowest common
denominator, the Dockerfile, to build their critical infrastructure
components, when there are more expressive, maintainable, and universal
tools like Ansible which produce the same end result.&lt;/p&gt;
&lt;h3&gt;Cluster Management&lt;/h3&gt;
&lt;p&gt;Kubernetes Clusters don't appear out of thin air. Depending on the type
of clusters you're using, they require management for upgrades and
integrations. Cluster management can become crippling, especially if,
like most organizations, you're managing multiple clusters (multiple
production clusters, staging and QA clusters, etc.).&lt;/p&gt;
&lt;p&gt;If you're running inside a private cloud, or on bare metal servers, you
will need a way to install Kubernetes and manage individual servers in
the cluster. Ansible has a proven track record of being able to
orchestrate multi-server applications, and Kubernetes itself is a
multi-server application---which happens to manage one or thousands of
other multi-server applications through containerization.&lt;/p&gt;
&lt;p&gt;Projects like &lt;a href="https://kubespray.io/"&gt;Kubespray&lt;/a&gt; have used Ansible for
custom Kubernetes cluster builds and are compatible with dozens of
different infrastructure arrangements.&lt;/p&gt;
&lt;p&gt;Even if you use a managed Kubernetes offering, like AKS, EKS, or GKE,
Ansible has modules like
&lt;a href="https://docs.ansible.com/ansible/latest/modules/azure_rm_aks_module.html"&gt;azure_rm_aks&lt;/a&gt;,
&lt;a href="https://docs.ansible.com/ansible/latest/modules/aws_eks_cluster_module.html"&gt;aws_eks_cluster&lt;/a&gt;,
and
&lt;a href="https://docs.ansible.com/ansible/latest/modules/gcp_container_cluster_module.html"&gt;gcp_container_cluster&lt;/a&gt;,
which manage clusters, along with thousands of other modules which
simplify and somewhat standardize cluster management among different
cloud providers.&lt;/p&gt;
&lt;p&gt;Even if you don't need multi-cloud capabilities, Ansible offers useful
abstractions like managing CloudFormation template deployments on AWS
with the
&lt;a href="https://docs.ansible.com/ansible/latest/modules/cloudformation_module.html"&gt;cloudformation&lt;/a&gt;
module, or Terraform deployments with the
&lt;a href="https://docs.ansible.com/ansible/latest/modules/terraform_module.html"&gt;terraform&lt;/a&gt;
module.&lt;/p&gt;
&lt;p&gt;It's extremely rare to have an application which can live entirely
within Kubernetes and not need to be coordinated with any external
resource (e.g. networking device, storage, external database service,
etc.). If you're lucky, there may be a Kubernetes Operator to help you
integrate your applications with external services, but more often
there's not. Here, too, Ansible helps by managing a Kubernetes
application along with external integrations, all in one playbook
written in cloud-native's &lt;em&gt;lingua franca&lt;/em&gt;, YAML.&lt;/p&gt;
&lt;p&gt;I'll repeat what I said earlier: you should not settle for automating
the inside of a Kubernetes cluster while using manual processes to build
and manage your cluster---especially if you have more than one cluster!&lt;/p&gt;
&lt;h3&gt;Application Lifecycle&lt;/h3&gt;
&lt;p&gt;The final area where Ansible shows great promise is in managing
applications inside of Kubernetes. Using Ansible to build operators with
the &lt;a href="https://github.com/operator-framework/operator-sdk"&gt;Operator SDK&lt;/a&gt;,
you can encode all your application's lifecycle management (deployment,
upgrades, backups, etc.) inside of a &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"&gt;Kubernetes
operator&lt;/a&gt;
to be placed in any Kubernetes cluster---even if you don't use Ansible
to manage anything else in that cluster.&lt;/p&gt;
&lt;p&gt;Rather than forcing developers and ops teams to learn Go or another
specialized language to maintain an operator, you can build it with YAML
and Ansible.&lt;/p&gt;
&lt;p&gt;There is a lot of promise here, though there are scenarios---at least,
in the current state of the Operator SDK---where you might need to drop
back to Go for more advanced use cases. The power comes in the ability
to rely on Ansible's thousands of modules from within your running
Application operator in the cluster, and in the ease of adoption for any
kind of development team.&lt;/p&gt;
&lt;p&gt;For teams who already use Ansible, it's a no-brainer to migrate their
existing Ansible knowledge, roles, modules, and playbooks into
Kubernetes management playbooks and Ansible-based operators. For teams
new to Ansible, its flexibility for all things related to IT automation
(Networking, Windows, Linux, Security, etc.) and ease of use make it an
ideal companion for cloud-native orchestration.&lt;/p&gt;</description><guid>https://ansible.com/blog/how-useful-is-ansible-in-a-cloud-native-kubernetes-environment/</guid><pubDate>Tue, 14 Jan 2020 00:00:00 GMT</pubDate></item><item><title>Make your Ansible Playbooks flexible, maintainable, and scalable</title><link>https://ansible.com/blog/make-your-ansible-playbooks-flexible-maintainable-and-scalable/</link><dc:creator>Jeff Geerling</dc:creator><description>&lt;h2&gt;Make your Ansible Playbooks flexible, maintainable, and scalable&lt;/h2&gt;
&lt;p&gt;In the years since, I've learned a lot of tricks to help ease the
maintenance burden for my work. It's important to me to have
maintainable projects, because many of my projects---like Hosted Apache
Solr---have been in operation for over a decade! If it's hard to
maintain the project or it's hard to make major architecture changes,
then I can lose customers to more nimble competitors, I can lose money,
and---most importantly---I can lose my sanity!&lt;/p&gt;
&lt;p&gt;I'm presenting a session at AnsibleFest Austin this year,
"Make your Ansible Playbooks flexible, maintainable, and scalable",
and I thought I'd summarize some of the major themes here.&lt;/p&gt;
&lt;h2&gt;Stay Organized&lt;/h2&gt;
&lt;p&gt;I love photography and automation, and so I spend a lot of time
building electronics projects that involve Raspberry Pis and cameras.
Without the organization system I use, it would be very frustrating putting
together the right components for my project.&lt;/p&gt;
&lt;p&gt;Similarly, in Ansible, I like to have my tasks organized so I can
compose them more easily, test them, and manage them without too much
effort.&lt;/p&gt;
&lt;p&gt;I generally start a playbook with all the tasks in one file. Once I hit
around 100 lines of YAML, I'll work to break related groups of tasks
into separate files and include them in the playbook with
&lt;code&gt;include_tasks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After the playbook starts becoming more complete, I often notice sets
of tasks that are related and can be isolated---like installing a piece
of software, copying a configuration for that software, then starting
(or restarting) a daemon. So I create a new role using
&lt;code&gt;ansible-galaxy init ROLE_NAME&lt;/code&gt;,
and then put those tasks into that role.&lt;/p&gt;
&lt;p&gt;If the role is generic enough, I'll either put it on GitHub and submit
it to Ansible Galaxy, or put it into a separate, private Git repository.
Now I can add a generic set of tests for the role (with
&lt;a href="https://github.com/metacloud/molecule/"&gt;Molecule&lt;/a&gt;
or some other testing setup), and I can share the role with many
projects---even with projects managed by completely separate
teams!&lt;/p&gt;
&lt;p&gt;Then I include the external roles into my project via a
&lt;code&gt;requirements.yml&lt;/code&gt;
file. For some projects, where stability is the most important trait, I
will also define the version
(a git ref or tag) for each included Ansible role. For other projects,
where I can afford to sacrifice stability a little for easier
maintenance over time (like test playbooks, or one-off server
configurations), I'll just put the role name (and repo details if it's
not on Galaxy).&lt;/p&gt;
&lt;p&gt;For most projects, I don't commit the external roles (those defined in
&lt;code&gt;requirements.yml&lt;/code&gt;) to the repository---I have a task in my CI system which installs the
roles fresh on every run. However, there are some cases where it's best
to commit &lt;em&gt;all&lt;/em&gt; the roles to the codebase. For example,
since developers can run my &lt;a href="https://www.drupalvm.com/"&gt;Drupal VM&lt;/a&gt; playbook on
a daily basis, and these developers often don't live near where Ansible
Galaxy's servers are located, they had trouble installing the large
number of Ansible Galaxy roles required. So I committed the roles to the
codebase, and now they don't have to wait for all the roles to be
installed every time they build a new Drupal VM instance.&lt;/p&gt;
&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt;
commit the roles to your codebase, you need to have a thorough process
for updating roles---make sure you don't let your
&lt;code&gt;requirements.yml&lt;/code&gt; file go out of sync with the installed roles! I often run
&lt;code&gt;ansible-galaxy install -r requirements.yml --force&lt;/code&gt;
to force-replace all the required roles in the codebase, and keep myself
honest!&lt;/p&gt;
&lt;h3&gt;Simplify and Optimize&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&amp;gt; YAML is not a programming language.
&amp;gt;
&amp;gt; ---Jeff Geerling
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One of the reasons people enjoy using Ansible is because it uses YAML,
and has a declarative syntax. You want a package installed, so you have
the task package: &lt;code&gt;name=httpd state=present&lt;/code&gt;. You want a
service running, so you have the task service: &lt;code&gt;name=httpd state=started&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are many cases where you need to add a little more intelligence,
though. For example, if you're using the same role to build both VMs
and containers and you don't want the service started in the container,
you need to add a when condition, like:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ensure Apache is started.&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpd&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;started&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;when&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'server_type&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;!=&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"container"'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This kind of logic is simple, and makes sense when reading a task and
figuring out what it does. But some may try to stuff tons of fancy logic
inside when
conditions or other places where Ansible gives a little exposure to
Jinja2 and Python, and that's when things can get off the
rails.&lt;/p&gt;
&lt;p&gt;As a rule of thumb, if you've spent more than 10 minutes wrestling
with escaping quotes in a
when condition
in your playbook, it's probably time to consider writing a separate
module to perform the logic you need to do for the task. Python should
&lt;em&gt;generally&lt;/em&gt; be in a separate module, not
inline with the rest of the YAML. There are exceptions to this (e.g.
when comparing more complex dicts and strings), but I try to avoid
writing any complex code in my Ansible
playbooks.&lt;/p&gt;
&lt;p&gt;Besides avoiding complex logic, it's also helpful to have your
playbooks run faster. Many times, I'll profile a playbook timer in the &lt;code&gt;ansible.cfg&lt;/code&gt;
file defaults section and run the playbook, and find that one or two
tasks or roles takes a really long time, compared to the rest of the
playbook.&lt;/p&gt;
&lt;p&gt;For example, one playbook used the copy module
for a large directory with dozens of files. Because of the way Ansible
performs a file copy internally, this meant there were many seconds
wasted waiting for Ansible to ferry each file across the SSH
connection.&lt;/p&gt;
&lt;p&gt;Converting that task to use &lt;code&gt;synchronize&lt;/code&gt; instead saved many seconds per playbook run.
For one run, this doesn't
seem like much; but when the playbook is run on a schedule (e.g. to
enforce a certain configuration on a server), or run as part of your CI
suite, it's important to help make it efficient. Otherwise this can
burn extra CPU cycles on inefficient code, and developers often hate
waiting a long time for CI tests to pass before they can know if their
code broke something or not.&lt;/p&gt;</description><guid>https://ansible.com/blog/make-your-ansible-playbooks-flexible-maintainable-and-scalable/</guid><pubDate>Fri, 28 Sep 2018 00:00:00 GMT</pubDate></item></channel></rss>