<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible Collaborative (Posts by Colin McCarthy)</title><link>https://ansible.com/</link><description></description><atom:link href="https://ansible.com/authors/colin-mccarthy.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:website@ansible.community"&gt;Ansible Collaborative, et al&lt;/a&gt; </copyright><lastBuildDate>Tue, 19 Mar 2024 16:48:34 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Ansible Linting with GitHub Actions</title><link>https://ansible.com/blog/ansible-linting-with-github-actions/</link><dc:creator>Colin McCarthy</dc:creator><description>&lt;h2&gt;Ansible Linting with GitHub Actions&lt;/h2&gt;
&lt;h3&gt;Want to trigger linting to your Ansible deployment on every Pull Request?&lt;/h3&gt;
&lt;p&gt;In this blog, I will show you how to add some great automation into your
Ansible code pipeline. &lt;/p&gt;
&lt;p&gt;CI/CD is currently a pretty hot topic for developers. Operations teams
can get started with some automated linting with GitHub actions. If you
use GitHub you can lint your playbooks during different stages including
git pushes or pull requests.&lt;/p&gt;
&lt;p&gt;If you're following good git flow practices and have an approval
committee reviewing pull requests, this type of automated testing can
save you a lot of time and keep your Ansible code nice and clean.&lt;/p&gt;
&lt;h3&gt;What is Ansible Lint?&lt;/h3&gt;
&lt;p&gt;Ansible Lint is an open source project that lints your Ansible code. The
&lt;a href="https://docs.ansible.com/ansible-lint/"&gt;docs&lt;/a&gt; state that it checks
playbooks for practices and behavior that could potentially be improved.
It can be installed with pip and run manually on playbooks or set up in
a pre-commit hook and run when you attempt a commit on your repo from
the CLI.&lt;/p&gt;
&lt;p&gt;The project can be found under the Ansible org on GitHub.&lt;/p&gt;
&lt;h3&gt;What are GitHub Actions?&lt;/h3&gt;
&lt;p&gt;From the GitHub &lt;a href="https://help.github.com/en/actions"&gt;documentation&lt;/a&gt;:
GitHub actions enable you to create custom workflows to automate your
project's software development life cycle processes. A workflow is a
configurable automated process made up of one or more jobs. You must
create a YAML file to define your workflow configuration. You can
configure your workflows to run when specific activity on GitHub
happens, at a scheduled time, or when an event outside of GitHub occurs.&lt;/p&gt;
&lt;p&gt;An Ansible Lint action can be found on GitHub's Actions Marketplace.&lt;/p&gt;
&lt;h3&gt;Example repo&lt;/h3&gt;
&lt;p&gt;Let me show you an example of what this would look like. Here I have a
repo that has an Ansible Playbook.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/colin-mccarthy/ansible_lint_demo"&gt;https://github.com/colin-mccarthy/ansible_lint_demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I attempted to submit a pull request to add a new playbook. The Ansible
Lint Action kicked off and eventually detected an issue and returned a
failed message.&lt;/p&gt;
&lt;h3&gt;Why did it fail?&lt;/h3&gt;
&lt;p&gt;I'm able to view the build logs under the Actions section of my repo. It
looks like I had some trailing white space and was comparing to an empty
string on one of my tasks.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image one" src="https://ansible.com/images/posts/archive/colin-blog-201.png"&gt;&lt;/p&gt;
&lt;h3&gt;Will I get an email notification?&lt;/h3&gt;
&lt;p&gt;I received an email notification as well, letting me know it had failed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image two" src="https://ansible.com/images/posts/archive/colin-m-blog-202.png"&gt;&lt;/p&gt;
&lt;h3&gt;Setting it up&lt;/h3&gt;
&lt;p&gt;To use the action simply create an Ansible Lint.yml (or choose custom &lt;code&gt;*.yml&lt;/code&gt; name) in the &lt;code&gt;.github/workflows/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image three" src="https://ansible.com/images/posts/archive/colin-m-blog-203.png"&gt;&lt;/p&gt;
&lt;p&gt;So here is the really cool part, you can run the action on various
events! This means every time someone submits a PR, or does a push, the
action will be triggered and a container will spin up and run Ansible
lint on your repo. You can define what events will trigger the action
using the &lt;code&gt;on: parameter&lt;/code&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pull_request&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Pre-commit hooks&lt;/h3&gt;
&lt;p&gt;I would like to go a little deeper into linting by bringing up
pre-commit hooks.&lt;/p&gt;
&lt;p&gt;Pre-commit hooks are little scripts run locally on your machine that can
help identify issues before submission for code review. When talking
about the Ansible Lint action, it would really come in handy to lint the
code before you submit your pull request. This would make sure you
always pass. The GitHub action would just serve as the final step that
guards the shared repo. If you are using pre-commit hooks you should
hypothetically never fail the GitHub action test.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image four" src="https://ansible.com/images/posts/archive/colin-m-blog-204.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pre-commit.com/"&gt;https://pre-commit.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To set this up on my MacBook I simply did a pip install.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pre-commit
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To set it up on your repo just make sure you...​&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;pre-commit&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To use Ansible Lint with &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;, just add
the following to your local repo's &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file. Make
sure to change &lt;code&gt;rev:&lt;/code&gt; to be either a git commit sha or tag of Ansible Lint
containing &lt;code&gt;hooks.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image five" src="https://ansible.com/images/posts/archive/colin-m-blog-205.png"&gt;&lt;/p&gt;
&lt;h3&gt;Markdown badge&lt;/h3&gt;
&lt;p&gt;Once you set up your action, Github will give you a snippet of markdown
code you can add to the README.md displaying the linting status of your
repo. A badge for your repo to show if it is passing the linting test.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image six" src="https://ansible.com/images/posts/archive/colin-m-blog-206.png"&gt;&lt;/p&gt;
&lt;p&gt;After removing the trailing whitespace and fixing all issues my PR is
showing "All checks have passed" and my badge is showing passed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image seven" src="https://ansible.com/images/posts/archive/colin-m-blog-207.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image eight" src="https://ansible.com/images/posts/archive/colin-m-blog-208.png"&gt;&lt;/p&gt;
&lt;h3&gt;In conclusion&lt;/h3&gt;
&lt;p&gt;Enforcing linting on code changes can build trust that your code is
following best practices. Hopefully, you can try and add some linting to
your Ansible repos with GitHub Actions or pre-commit hooks. Setting up
this action was a lot of fun and I especially like the badge that was
provided.&lt;/p&gt;</description><guid>https://ansible.com/blog/ansible-linting-with-github-actions/</guid><pubDate>Thu, 30 Apr 2020 00:00:00 GMT</pubDate></item><item><title>Ansible and ServiceNow Part 2</title><link>https://ansible.com/blog/ansible-servicenow-part-2-parsing-facts-from-network-devices-using-pyats/genie/</link><dc:creator>Colin McCarthy</dc:creator><description>&lt;h2&gt;Parsing facts from network devices using PyATS/Genie&lt;/h2&gt;
&lt;p&gt;This blog is part two in a series covering how Red Hat Ansible
Automation can integrate with ticket automation. This time we'll cover
dynamically adding a set of network facts from your switches and routers
and into your ServiceNow tickets.&lt;/p&gt;
&lt;p&gt;Suppose there was a certain network operating system software version
that contained an issue you knew was always causing problems and making
your uptime SLA suffer. How could you convince your management to
finance an upgrade project? How could you justify to them that the fix
would be well worth the cost? Better yet, how would you even know?&lt;/p&gt;
&lt;p&gt;A great start would be having metrics that you could track. The ability
to data mine against your tickets would prove just how many tickets were
involved with hardware running that buggy software version. In this
blog, I'll show you how to automate adding a set of facts to all of your
tickets going forward. Indisputable facts can then be pulled directly
from the device with no chance of mistakes or accidentally being
overlooked and not created.&lt;/p&gt;
&lt;p&gt;This blog post will demonstrate returning structured data in JSON using
Ansible in conjunction with Cisco pyATS and Cisco Genie. This allows us
to retrieve the output from operational show commands and convert them
in any format we want, in this case pushing them into ServiceNow.&lt;/p&gt;
&lt;p&gt;There are many ways to parse facts from network devices with Ansible.
The following blog example could also all be done via the open source
&lt;a href="https://galaxy.ansible.com/ansible-network/network-engine"&gt;Network Engine Ansible Role&lt;/a&gt;, but
for this example we are using Cisco's sponsored pyATS/Genie
implementation to parse the following show version command. As you can
see this is not very friendly to programmatically interact with:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image7" src="https://ansible.com/images/posts/archive/image7.png"&gt;&lt;/p&gt;
&lt;h3&gt;Step 1: Create a Python3 virtual environment in Red Hat Ansible Tower&lt;/h3&gt;
&lt;p&gt;With the release of Ansible Tower 3.5, we can now use Python 3 virtual
environments (virtualenv) for added playbook flexibility and
compatibility across Python versions. This is great news because Python3
is required to use the pyATS and Genie packages. We need to create a new
(virtualenv) that is running Python3 and install all of the
dependencies.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;su&lt;span class="w"&gt; &lt;/span&gt;-
yum&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;rh-python36
yum&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python36-devel&lt;span class="w"&gt; &lt;/span&gt;gcc
scl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rh-python36&lt;span class="w"&gt; &lt;/span&gt;bash
python3.6&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;/var/lib/awx/venv/pyats-sandbox
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/var/lib/awx/venv/pyats-sandbox/bin/activate
&lt;span class="nb"&gt;umask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0022&lt;/span&gt;
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyats&lt;span class="w"&gt; &lt;/span&gt;genie&lt;span class="w"&gt; &lt;/span&gt;python-memcached&lt;span class="w"&gt; &lt;/span&gt;psutil&lt;span class="w"&gt; &lt;/span&gt;pysnow&lt;span class="w"&gt; &lt;/span&gt;paramiko
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-U&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ansible == 2.8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once a custom virtualenv is created a new field appears in the Job
Templates section in Ansible Tower. You can select your newly created
venv from the following dropdown
menu:&lt;img alt="image1-6" src="https://ansible.com/images/posts/archive/image1-6.png"&gt;&lt;/p&gt;
&lt;p&gt;Cisco has released two Python3 packages that are very useful for network
automation - pyATS, and Genie. The first one, pyATS, functions as a
python framework while Genie builds on top of it. Genie can be used to
parse, learn, and diff. Implementing Genie is accomplished by installing
and calling the Galaxy role in our playbook named parse_genie.&lt;/p&gt;
&lt;h3&gt;Step 2: Create a requirements.yml file in your roles directory&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;roles/requirements.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;parse_genie&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/clay584/parse_genie&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;scm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By default, Ansible Tower has a system-wide setting that allows roles to
be dynamically downloaded via a requirements.yml file in your Git repo.
So there is no need to run the
&lt;code&gt;ansible-galaxy install -r roles/requirements.yml&lt;/code&gt; command like you
might do if using Ansible Engine on the CLI.&lt;/p&gt;
&lt;p&gt;For more information about Projects in Ansible Tower, &lt;a href="https://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html"&gt;refer to the
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Step 3: Call the parse_genie Ansible Role&lt;/h3&gt;
&lt;p&gt;Now that you have a Python 3 virtualenv in Tower and a
roles/requirements.yml file, you can write and test a playbook. In the
first play of the playbook, define the name, hosts identified for
Ansible to run against, the connection plugin and disabling gather_facts
for network devices. Next, create a roles: section and invoke the
parse_genie role:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;parser example&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ios&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;gather_facts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;no&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;network_cli&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;parse_genie&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then create the tasks: section and add a show version task. This will
execute the show version command via the ios_command module, then store
the output to a variable named version.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;show version&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ios_command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;show version&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next tasks will apply the parse_genie filter plugin to create
structured data out of the show version command we executed. As well as
set the structured data as a fact and debug it.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set Fact Genie Filter&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;set_fact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pyats_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;version['stdout'][0]&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;parse_genie(command='show&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;version',&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;os='ios')&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Debug Genie Filter&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pyats_version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 4: Run the Ansible Playbook&lt;/h3&gt;
&lt;p&gt;At this point the playbook is largely complete and you can execute and
then test it.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;parser example&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ios&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;gather_facts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;no&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;network_cli&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;parse_genie&lt;/span&gt;

&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;show version&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ios_command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;show version&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;version&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set Fact Genie Filter&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;set_fact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pyats_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;version['stdout'][0]&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;parse_genie(command='show&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;version',&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;os='ios')&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Debug Genie Filter&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pyats_version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The parser takes the command output and creates a structured data in
JSON format. The facts that you want to use later in your playbook, are
now easily accessible.&lt;/p&gt;
&lt;h3&gt;Step 5: Validate the Ansible Playbook run&lt;/h3&gt;
&lt;p&gt;After running the playbook (we did it via Ansible Tower), the following
is the debug Genie Filter Task from playbook
run:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image6-2" src="https://ansible.com/images/posts/archive/image6-2.png"&gt;&lt;/p&gt;
&lt;p&gt;The full output:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="err"&gt;TASK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;Debug&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Ge&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ie&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Fil&lt;/span&gt;&lt;span class="kc"&gt;ter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;******************************************************&lt;/span&gt;

&lt;span class="err"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;192.168.161.9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"chassis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"WS-C3550-24"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"chassis_sn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"CAT0651Z1E8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"curr_config_register"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0x10F"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"hostname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nco-rtr-9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"image_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"C3550-IPSERVICESK9-M"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"image_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"developer image"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"last_reload_reason"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"warm-reset"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"main_mem"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"65526"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"number_of_intfs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nt"&gt;"FastEthernet"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"24"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nt"&gt;"Gigabit Ethernet"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"os"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"C3550 boot loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"platform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"C3550"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"processor_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PowerPC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"rom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bootstrap program is C3550 boot loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"rtr_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"WS-C3550-24"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"system_image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"flash:c3550-ipservicesk9-mz.122-44.SE3/c3550-ipservicesk9-mz.122-44.SE3.bin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"uptime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"44 minutes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"12.2(44)SE3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;"version_short"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"12.2"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 6: Integrate parsed content into ServiceNow tickets&lt;/h3&gt;
&lt;p&gt;What I would like to do now is add some new fields in the ServiceNow
incident layout. Let's add the version, uptime, hostname, platform,
device type, serial number, and last reload reason facts to every
incident ticket Ansible creates.&lt;/p&gt;
&lt;p&gt;In the ServiceNow Web dashboard, add these new fields in &lt;strong&gt;Configure &amp;gt; Form Layout&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2-6" src="https://ansible.com/images/posts/archive/image2-6.png"&gt;&lt;/p&gt;
&lt;p&gt;Now when you run your playbook from part one of this blog with the table
parameter set as incident. When you debug the incident.record dictionary
it should now have the new fields you just created, such as
u_device_up_time, u_ios_version, etc.&lt;/p&gt;
&lt;p&gt;Snippet of the record dictionary the ServiceNow API sends back:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image4-3" src="https://ansible.com/images/posts/archive/image4-3.png"&gt;&lt;/p&gt;
&lt;p&gt;We can use these new fields in the data section of our Ansible Playbook
that uses the &lt;a href="https://docs.ansible.com/ansible/latest/modules/snow_record_module.html"&gt;snow_record module&lt;/a&gt;.
The following is the complete playbook that runs the show version
command, parses the output and adds the parameters into the new fields:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;create ticket with notes&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ios&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;gather_facts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;no&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;network_cli&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;parse_genie&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;include vars&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;include_vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;incident_vars.yml&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;show version&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ios_command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;show version&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;version&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set Fact Genie Filter&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;set_fact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;pyats_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;version['stdout'][0]&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;parse_genie(command='show&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;version',&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;os='ios')&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;

&lt;span class="c1"&gt;# Example 1 showing version information&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Debug Pyats facts&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pyats_version.version.version&lt;/span&gt;

&lt;span class="c1"&gt;# Example 2 showing uptime&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Debug Pyats facts&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pyats_version.version.uptime&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create an incident&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;snow_record&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;incident&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sn_username&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sn_password&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sn_instance&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sn_priority}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;u_device_up_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pyats_version.version.uptime&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;u_ios_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pyats_version.version.version&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;u_hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pyats_version.version.hostname&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;u_platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pyats_version.version.platform&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;u_device_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pyats_version.version.rtr_type&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;u_serial_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pyats_version.version.chassis_sn&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;u_last_reload_reason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;pyats_version.version.last_reload_reason&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;short_description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"This&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ticket&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;was&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;created&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;by&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Ansible"&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;var=new_incident.record.number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Two additional debug examples are provided above to show how to work
with the pyATS dictionary that was returned. With structured output it
is much easier to grab the specific information you want using the key
(e.g. pyats_version.version.uptime is the key that returns the value for
the uptime of the system). The full dictionary is provided above in step 5.&lt;/p&gt;
&lt;p&gt;The following screenshot is the output of the playbook shown from Red
Hat Ansible Tower:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image3-3" src="https://ansible.com/images/posts/archive/image3-3.png"&gt;&lt;/p&gt;
&lt;p&gt;The new fields are now
populated in our ServiceNow incident ticket:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image5 copy" src="https://ansible.com/images/posts/archive/image5-copy.png"&gt;&lt;/p&gt;
&lt;p&gt;During an outage things can become chaotic. We have all seen how on
certain days in the network field, tickets can become a very low
priority. Automating the creation and dynamic facts solves this and
allows engineers to remain focused on the outage.&lt;/p&gt;
&lt;h3&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;Something like this may help your organization adopt automation in
steps. These Ansible Playbooks are low risk because they do not modify
any configurations, they are read-only. This might be a great first step
for network engineers, without having to be doing holistic automation or
even config management. You may consider replacing the ios entry in the
filter plugin to use ansible_network_os variable that was introduced
with the network_cli connection plugin. That way you could run against
nxos, ios, junos, etc. all in the same inventory and playbook run. In
this blog we left it as ios so it could be easier to grasp if this is
your first time seeing it.&lt;/p&gt;
&lt;p&gt;Stay tuned for part 3 of this series - we will cover integration from
ServiceNow to Ansible Tower's API. Where you can automatically have
ServiceNow execute Ansible Playbooks.&lt;/p&gt;</description><guid>https://ansible.com/blog/ansible-servicenow-part-2-parsing-facts-from-network-devices-using-pyats/genie/</guid><pubDate>Fri, 19 Jul 2019 00:00:00 GMT</pubDate></item><item><title>Ansible and ServiceNow Part 1, Opening and Closing Tickets</title><link>https://ansible.com/blog/ansible-servicenow-opening-and-closing-tickets/</link><dc:creator>Colin McCarthy</dc:creator><description>&lt;h2&gt;Ansible and ServiceNow Part 1, Opening and Closing Tickets&lt;/h2&gt;
&lt;p&gt;As a Network Engineer, I hated filling out tickets. Anytime a router
would reboot or a power outage took place at a remote site, the
resulting ticket generation took up about 50% of my day. If there had
been a way to automate ticket creation, I would have saved a lot of
time. The only thing unique to provide would have been case-specific
comment sections needing additional information about the issue.&lt;/p&gt;
&lt;p&gt;While ticket creation was a vital activity, automating this was not an
option at the time. This is surprising because my management was always
asking me to include more information in my tickets. Tickets were often
reviewed months later and sometimes never got created or did not have
much relevant information included.&lt;/p&gt;
&lt;p&gt;Fast forward to today, companies are now data mining from tickets with a
standard &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variables-discovered-from-systems-facts"&gt;set of facts&lt;/a&gt;
that are pulled directly from the device during ticket creation, such as
network platform, software version, uptime, etc.  Network operations
(NetOps) teams now use massive amounts of ticket data to make budget
decisions.&lt;/p&gt;
&lt;p&gt;For example, if there were 400 network outages due to power issues,
NetOps could then make a case to spend \$40,000 on battery backups,
having proved that it would prevent around 400 outages a year. Having
access to these metrics is extremely valuable for making informed
business decisions.&lt;/p&gt;
&lt;p&gt;This first blog in the series covers how Ansible automates change
requests from ServiceNow, a popular cloud-based SaaS provider. For
convenience, ServiceNow provides developers a test instance to use
Ansible Playbooks, which is utilized for this and future blog posts. You
can sign up for your own free developers instance at the ServiceNow
Developer portal.&lt;/p&gt;
&lt;h3&gt;Creating a ServiceNow ticket&lt;/h3&gt;
&lt;p&gt;The Ansible distribution includes the
&lt;a href="https://docs.ansible.com/ansible/latest/modules/snow_record_module.html"&gt;snow_record&lt;/a&gt;
module that makes it easy to open and close ServiceNow tickets. The
&lt;code&gt;pysnow&lt;/code&gt; Python library
will first need to be installed to use this module.&lt;/p&gt;
&lt;p&gt;The next requirement is getting the
&lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;instance&lt;/code&gt; for
authentication to your recently created developer cloud based ServiceNow
instance.&lt;/p&gt;
&lt;p&gt;NOTE: the instance should look something like this instance: dev99999 not the full URL&lt;/p&gt;
&lt;p&gt;&lt;code&gt;instance:_http://dev99999.service-now.com&lt;/code&gt; as shown below in &lt;code&gt;change_request_vars.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;#snow_record variables&lt;/span&gt;

&lt;span class="n"&gt;sn_username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="n"&gt;sn_password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_password&lt;/span&gt;
&lt;span class="n"&gt;sn_instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dev99999&lt;/span&gt;

&lt;span class="c1"&gt;#data variables&lt;/span&gt;

&lt;span class="n"&gt;sn_severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;sn_priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following is the Ansible Playbook to create a ServiceNow ticket:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create ticket with notes&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;gather_facts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;no&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;local&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;include vars&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;include_vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;change_request_vars.yml&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create a change request&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;snow_record&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;change_request&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sn_username&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sn_password&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sn_instance&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sn_severity&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;sn_priority&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;short_description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"This&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;test&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;opened&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;by&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Ansible"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;new_incident&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;new_incident.record&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Leveraging the ServiceNow API&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;table&lt;/code&gt; parameter
determines what type of ticket will be opened. A great way to determine
the other parameters available is to view the JSON dictionary the
ServiceNow API sends back after you have created your ticket. I am using
&lt;code&gt;register&lt;/code&gt; to give a
variable name to that dictionary and then using &lt;code&gt;debug&lt;/code&gt; to view it in the
terminal. The following is just a portion of the full dictionary for the
sake of brevity:&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_leverage-servicenow-api" src="https://ansible.com/images/posts/archive/blog_leverage-servicenow-api.png"&gt;&lt;/p&gt;
&lt;p&gt;This is very handy in spelling out the parameters you can add under the
&lt;code&gt;data&lt;/code&gt; section of your
task. If you want to see just one parameter of the dictionary, for
example the ticket number, you can simply modify your debug to look like
the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;- debug: var=new_incident.record.number&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This variable (var) is defined as pulling from the stored register
&lt;code&gt;new_change_request&lt;/code&gt; to then show the dictionary named
&lt;code&gt;record&lt;/code&gt; and the parameter
of that dictionary called &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_leverage-servicenow-api-2" src="https://ansible.com/images/posts/archive/blog_leverage-servicenow-api-2.png"&gt;&lt;/p&gt;
&lt;p&gt;You could do the same thing with any parameter of the record dictionary
such as &lt;code&gt;close_code&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;comments&lt;/code&gt;, and many
others.&lt;/p&gt;
&lt;h3&gt;Validating changes in ServiceNow web portal&lt;/h3&gt;
&lt;p&gt;Next, log into your developers instance of ServiceNow and view the
&lt;strong&gt;Change-&amp;gt;all&lt;/strong&gt; section in the left menu bar. You should see your change
request in the list.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_servicenow-screen" src="https://ansible.com/images/posts/archive/blog_servicenow-screen.png"&gt;&lt;/p&gt;
&lt;p&gt;Notice that the short description has been filled out by our Ansible
Playbook task: This is a test opened by Ansible as well as the priority
&lt;code&gt;2 - High&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_servicenow-screen-2" src="https://ansible.com/images/posts/archive/blog_servicenow-screen-2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Closing a ServiceNow ticket&lt;/h3&gt;
&lt;p&gt;Now that we've demonstrated the opening of ServiceNow tickets, we should
demonstrate closing or resolving the ticket as well. This is done by
specifying the &lt;code&gt;state&lt;/code&gt;
parameter in another Ansible task. This is where it can get tricky
because &lt;code&gt;state&lt;/code&gt; is a
parameter of the record dictionary as well as a parameter of the
&lt;code&gt;snow_record&lt;/code&gt; module.
Please be mindful of this multi-purpose parameter used in Ansible.&lt;/p&gt;
&lt;p&gt;The following is a snippet from the
&lt;code&gt;record&lt;/code&gt; dictionary when
we created our ticket:&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_closing-servicenow-ticket" src="https://ansible.com/images/posts/archive/blog_closing-servicenow-ticket.png"&gt;&lt;/p&gt;
&lt;p&gt;Notice the original &lt;code&gt;state&lt;/code&gt; was &lt;code&gt;-5&lt;/code&gt;. The Ansible task
below will change it to &lt;code&gt;-3&lt;/code&gt;, which results in a
ticket state changing from New to Authorize.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Modify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;snow_record&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;present&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;change_request&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{{ sn_username }}"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{{ sn_password }}"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{{ sn_instance }}"&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHG0030002&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incident&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incident&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In ServiceNow a &lt;code&gt;change_request&lt;/code&gt; needs to
be walked through a few different states before it can be closed. The
numeric values for the different states can be found in the ServiceNow
documentation. I recommend you have five separate Ansible tasks that
each change the state in this order: &lt;code&gt;-3&lt;/code&gt;, &lt;code&gt;-2&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;. Please note that these
values are for the ServiceNow Kingston release and that other releases
may use different state numbers. Your organization may have other steps
required along the way, but hopefully this article was enough to get you
started. At this point you've learned how to open tickets, and close
tickets with specific labels via Ansible Playbooks.&lt;/p&gt;
&lt;p&gt;Stay tuned for part 2 - I'll describe adding a set of parsed facts to
your tickets.&lt;/p&gt;</description><guid>https://ansible.com/blog/ansible-servicenow-opening-and-closing-tickets/</guid><pubDate>Thu, 06 Jun 2019 00:00:00 GMT</pubDate></item></channel></rss>